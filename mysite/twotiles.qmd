---
title: "Twotiles Code Visualization"
format:
  html:
    code-fold: true
    code-summary: " "
    echo: true
    self-contained: false
jupyter: python3
execute:
  cache: true
---

<script src="https://cdn.jsdelivr.net/npm/scittle@0.6.22/dist/scittle.js"></script>
<script src="https://unpkg.com/blockly/blockly.min.js"></script>
<script src="https://unpkg.com/blockly/msg/en.js"></script>
<script src="https://kloimhardt.github.io/twotiles/twotiles_core.js"></script>

<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var brender = (code,divid) =>
Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)),
Blockly.inject(divid,
{"toolbox": twotiles.toolbox,
"sounds": false,
"scrollbars": false,
"trashcan": false}));
</script>

Twotiles is a free and open JavaScript libaray for turning code into visual blocks. The library can be used in any website.

## Example

The following uses a simple math example, taking the derivative of a logarithm, to show how code is visualized with the Twotiles library.

### Symbolic computation in Python: SymPy

```{python}
#| code-summary: "Code Preamble"
from sympy import symbols,diff,log
from functools import partial
x=symbols("x")
b=symbols("b")
y=symbols("y")

def call(f, x):
    return f(x)
```

Using SymPy, one can calculate with symbols. Here, `x` is a symbol.

<div id="blocklyDiv21" style="height: 100px;"></div>
<script>brender("(:tiles/infix (- (:tiles/infix (/ 5 x)) (:tiles/infix (+ 50 14))))", "blocklyDiv21")</script>
```{python}
5/x - (50 + 14)
```

<div id="blocklyDiv1" style="height: 100px;"></div>
<script>brender("(log 64)", "blocklyDiv1")</script>
```{python}
log(64.0)
```

One can also make an explicit call to the `log` function.

<div id="blocklyDiv23" style="height: 100px;"></div>
<script>brender("(call log 64)", "blocklyDiv23")</script>
```{python}
call(log, 64.0)
```

This makes `call` a special kind of function. Because it takes a function as its first argument, `call` is a function of "higher order". But for now we return to the usual way of making a calculation.

<div id="blocklyDiv22" style="height: 100px;"></div>
<script>brender("(log (:tiles/infix (* x 5)))", "blocklyDiv22")</script>
```{python}
log(x * 5)
```

<div id="blocklyDiv24" style="height: 100px;"></div>
<script>brender("(diff (:tiles/infix (* (log x) 5)) x)", "blocklyDiv24")</script>
```{python}
diff(log(x) * 5, x)
```

<div id="blocklyDiv2" style="height: 100px;"></div>
<script>brender("(diff (log x) x)", "blocklyDiv2")</script>
```{python}
diff(log(x),x)
```

<div id="blocklyDiv3" style="height: 150px;"></div>
<script>brender("(def (logarithm b x) (return (:tiles/infix (/ (log x) (log b)))))", "blocklyDiv3")</script>
```{python}
def logarithm(b, x):
    return log(x) / log(b)
```

<div id="blocklyDiv4" style="height: 100px;"></div>
<script>brender("(logarithm 8.0 64.0)", "blocklyDiv4")</script>
```{python}
logarithm(8.0, 64.0)
```

<div id="blocklyDiv5" style="height: 150px;"></div>
<script>brender("(def (log_base b) (return (partial logarithm b)))", "blocklyDiv5")</script>
```{python}
def log_base(b):
    return partial(logarithm, b)
```

<div id="blocklyDiv6" style="height: 100px;"></div>
<script>brender("(call (log_base 8.0) 64.0)", "blocklyDiv6")</script>
```{python}
call(log_base(8.0),64.0)
```

<div id="blocklyDiv7" style="height: 100px;"></div>
<script>brender("(diff (call (log_base 8.0) x) x)", "blocklyDiv7")</script>
```{python}
diff(call(log_base(8.0),x),x)
```
### Symbolic computation in JavaScript: EmmyJS

<script src="https://kloimhardt.github.io/blog/js/emmy.js/build/emmy_bundle.js"></script>

<script>
var loadEnv = (name) => window[name] = emmy[name];
["div", "mul", "sub", "add", "expt", "log",
"partial", "symbol", "to_infix"].map(loadEnv);
</script>

<script>
var x = symbol("x");
var b = symbol("b")
var y = symbol("y")
var call = (f, x) => f(x);

var diff = emmy.D;
var logarithm = (b,x) => div(log(x),log(b));
var log_base = (b) => partial(logarithm,b);

</script>

<div id="blocklyDiv8" style="height: 100px;"></div>
<script>brender("(call (diff (log_base 8.0)) x)", "blocklyDiv8")</script>
```{ojs}
to_infix(
  call(diff(log_base(8.0)), x)
)
```

<div id="blocklyDiv9" style="height: 100px;"></div>
<script>brender("(call (diff log) x)", "blocklyDiv9")</script>
```{ojs}
//| output: asis
to_infix(
  call(diff(log), x)
)
```

### SymPy Recap

<div id="blocklyDiv10" style="height: 100px;"></div>
<script>brender("(diff (log x) x)", "blocklyDiv10")</script>

## Guide

### Using Twotiles in a Website

To display graphical blocks, include into your web-site the Scittle, Blockly and indeed the Twotiles library:

```
<script src="https://cdn.jsdelivr.net/npm/scittle@0.6.22/dist/scittle.js"></script>
<script src="https://unpkg.com/blockly/blockly.min.js"></script>
<script src="https://unpkg.com/blockly/msg/en.js"></script>
<script src="https://kloimhardt.github.io/twotiles/twotiles_core.js"></script>
```

Then initialize the Twotiles parser ...

```
<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
</script>
```
... and Blockly:

```
<script>
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>
```

It is convenient to have a render function:

```
<script>
var brender = (code,divid) =>
Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)),
Blockly.inject(divid,
{"toolbox": twotiles.toolbox,
"sounds": false,
"scrollbars": false,
"trashcan": false}));
</script>
```

Then graphics can be displayed with

```
<div id="blocklyDiv" style="height: 100px;"></div>
<script>brender("(log 64)", "blocklyDiv")</script>
```
which looks like this:

<div id="blocklyDiv" style="height: 100px;"></div>
<script>brender("(log 64)", "blocklyDiv")</script>

### Using EmmyJS

A detailed example of EmmyJS can be found at [sicmutils-as-js-book-part1.html](https://kloimhardt.github.io/blog/html/sicmutils-as-js-book-part1.html)

### Quarto Notebook of this Page

This page was generated with Quarto out of the file [twotiles.qmd](https://github.com/kloimhardt/site/blob/main/mysite/twotiles.qmd)

