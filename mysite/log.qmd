---
title: "Log2 and the Musical Scale"
format:
  html:
    code-fold: false
    code-summary: "N.A."
    echo: true
    self-contained: false
jupyter: python3
execute:
  cache: false
---
<script type="text/javascript" charset="UTF-8"
999 6
 src="jsfiles/jsxgraph/distrib/jsxgraphcore.js"></script>
<link rel="stylesheet" type="text/css" href="jsfiles/jsxgraph/distrib/jsxgraph.css" />

<script>var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;</script>
<script src="jsfiles/scittle/dist/scittle.js" type="application/javascript"></script>
<script src="jsfiles/scittle/dist/scittle.nrepl.js" type="application/javascript"></script>
<script src="jsfiles/blockly/blockly_compressed.js"></script>
<script src="jsfiles/blockly/msg/en.js"></script>
<script src="jsfiles/twotiles/twotiles_core.js"></script>

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/css/syntax.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/bootstrap/css/bootstrap.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/inline-edit/css/style.css">

<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var brender = (code,divid) => {
let ws = Blockly.inject(divid,
{"sounds": false,
"scrollbars": false,
"trashcan": false});

Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)), ws);

return ws;
}
</script>

<script>var statejs = {};</script>

<script>
const delay = ms => new Promise(res => setTimeout(res, ms));
</script>

::: {.hidden}
```{python}
#|code-fold: true
#|code-summary: "Code Preamble"

import sympy
from sympy import symbols, diff, ln
from sympy.codegen.cfunctions import log2
from functools import partial
x=symbols("x")
b=symbols("b")
y=symbols("y")
z=symbols("z")

def call(f, x):
    return f(x)

def mapv(a, b):
    return list(map(a, map(lambda x: 1.0 * x, b)))

def D(f):
    x1 = symbols("x1")
    return sympy.lambdify([x1], diff(f(x1), x1), "sympy")

def rnd(expr):
     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})
```
:::

::: {.hidden}
```{python}
#| output: asis

import numpy as np
import json
import inspect

# https://muted.io/note-frequencies/
data = np.genfromtxt('notes.txt', delimiter='\t', dtype=str)
row_names = data[:, 0].tolist()
numerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()
               
print("<script>")
print("statejs['notenames']= ")
print(json.dumps(row_names))
print("statejs['frequencies']= ")

nofreq = [item
    for subl in
      [list(map(lambda n,f: [n, idx, f], row_names, fs))
        for idx, fs in enumerate(numerical_data)]
   for item in subl]


print(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith("s")]))
print("</script>")

# instead of using the plain js
# print("<script src='jsfiles/notes.js'></script>")
# we load the respective Scittle code

print("<script>")
with open('notes.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

> The Pythagoreans have shown that the pitch of a tone depends on the length of a cord and that intervals are produced by simple numerical ratios of its length. This was the first successful reduction of quality to quantity and therefore the beginning of science.  
> - Arthur Koestler, the Sleepwalkers

<details>
<summary>1</summary>
<div id="divnotes2" class="jxgbox" style="height:300px;"></div>
<script>statejs.notes.main("divnotes2");</script>

<span onClick=statejs.notes.main('divnotes2') style="color:blue">1</span>
<span onClick="statejs.notes.anim1()" style="color:blue">2</span>
<span onClick="statejs.notes.anim2()" style="color:blue">3</span>
<span onClick="statejs.notes.anim3()" style="color:blue">4</span>
<span onClick="statejs.notes.anim5()" style="color:blue">5</span>
<span onClick="statejs.notes.anim6()" style="color:blue">6</span>
</details>

<details>
<summary>2a</summary>
## The log2 Function
</details>

<details>
<summary>2b</summary>
<div id="blocklyDivLog2" style="height: 300px;"></div>
<script>brender("(:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDivLog2")</script>
</details>

::: {.hidden}
```{python}
#| output: asis
print("<script>")
with open('log23.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
::: {.column-margin}
<details>
<summary>3</summary>
<div id="divlog23" class="jxgbox" style="height:150px; width: 350px"></div>
<script>
statejs.log23.main("divlog23");
statejs.log23.anim2();
</script>
</details>
:::
-->

<details>
<summary>4</summary>
<div id="divmanylogs" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.many("divmanylogs");

const mywait = async () => {
  statejs.log23.manyanim2(110, 7);
  await delay(500);
  statejs.log23.manyanim2(440, 7);
  await delay(500);
  statejs.log23.manyanim2(880, 7);
};
</script>

<span onClick=statejs.log23.many("divmanylogs") style="color:blue">1</span>
<span onClick=mywait() style="color:blue">2</span>
</details>

<details>
<summary>5b</summary>
<div id="blocklyDiv5" style="height: 300px;"></div>
<script>
var ws5=null;
function brws5() {
ws5 = brender(" (:tiles/infix (* (log2 (:tiles/infix (/ x intersect))) steps))", "blocklyDiv5");
}
brws5();
var addBlocks = (ws) => (s) =>
Blockly.Xml.appendDomToWorkspace(Blockly.utils.xml.textToDom(parse(s)), ws);
var abws5 = addBlocks(ws5);
</script>

<span onClick="" style="color:blue">1</span>
<span onClick="abws5('(def (log2a intersect steps x) (return :tiles/slot))')" style="color:blue">2</span>
<span onClick="abws5('(log2a 220 7 440)')" style="color:blue">3</span>
<span onClick="abws5('(log2a 1 1 2)')" style="color:blue">4</span>

</details>

::: {.column-margin}
<details>
<summary>---</summary>
<div style="width: 350px">
```{python}
def log2a(intersect, steps, x):
    return log2(x/intersect) * steps
```
</div>
</details>
:::


<!--
<details>
<summary>5c5d5e</summary>
<div id="jjjobs">
<div class="cljs-editor-new"><pre>(do (defn add-blocks [s] (display-html (str "&lt;tiles&gt;" s "&lt;/tiles&gt;")) :tiles)

(add-blocks '(def (log2a intersect steps x) (return :tiles/slot))))
(add-blocks '(log2a 220 7 440))
(add-blocks '(log2a 1 1 2))</pre></div>
</div>
</details>

<script src="jsfiles/rigsomelight.com/assets/inline-edit/main.js"></script>

<script>
function mutationCallback(customFn, mutationsList, observer) {
      mutationsList.forEach((mutation) => {
        if (mutation.target.className == "cljs-html-display active" &&
            mutation.type == "childList") {
        customFn(mutation.target.childNodes[0].innerText);
        }
    });
}

const observer = new MutationObserver(mutationCallback.bind(null, addBlocks(ws5)));
const targetNode = document.getElementById("jjjobs");
const config = { attributes: true, childList: true, subtree: true };
observer.observe(targetNode, config);
</script>

-->

::: {.column-margin}
<div>
<details>
<summary>---</summary>
<div style="width: 350px">
```{python}
log2a(220, 7, 440)
```
</div>
</details>

<details>
<summary>---</summary>
```{python}
log2a(1, 1, 2)
```
</details>
</div>
:::

:::{.column-screen-left}
<details>
<summary>9</summary>
<table>
<tr>
<td style="vertical-align: top">
<div id="blocklyDivLog21" style="height: 150px; width: 230px"></div>
<script>brender("(log2 x)", "blocklyDivLog21")</script>
</td>
<td>
<div id="divlog2x" class="jxgbox" style="height:300px; width: 800px"></div>
<script>
statejs.log23.log3("divlog2x");
</script>
<span onClick=statejs.log23.log3("divlog2x") style="color:blue">1</span>
<span onClick=statejs.log23.log3anim2() style="color:blue">2</span>
<span onClick=statejs.log23.log3anim3() style="color:blue">3</span>
</td>
</tr>
</table>
</details>
:::

<details>
<summary>10a</summary>
## The mapv Function
</details>

:::{.column-screen-left}
<details>
<summary>10b</summary>
<table><tr>
<td style="vertical-align: top">
<div style="height: 300px; width:230px; text-align: right">
<img src="jsfiles/xkcd_mapv.jpg"></img></div>
</td>
<td style="vertical-align: top">
<div id="blocklyDiv10" style="height: 300px; width: 800px"></div>
<script>brender("(mapv log2 [8 16 32])", "blocklyDiv10")</script>
</td>
</tr></table>
</details>
:::

<details>
<summary>11</summary>
```{python}
mapv(log2, [8, 16, 32])
```
</details>

:::{.column-screen-left}
<details>
<summary>14</summary>
<table><tr>
<td style="vertical-align: top">
<div style="height: 150px; width: 230px"><img src="jsfiles/xkcd_partial.jpg" style="horizontal-align: right"></img></div>
</td>
<td style="vertical-align: top">
<div id="blocklyDiv14" style="height: 300px; width: 800px"></div>
<script>brender("(mapv (partial log2a 1 1) [8 16 32])", "blocklyDiv14")</script>
</td>
</tr></table>
</details>
:::

<details>
<summary>15</summary>
```{python}
mapv(partial(log2a, 1, 1), [8, 16, 32])
```
</details>

<details>
<summary>16a</summary>
## The log2b function
</details>

<details>
<summary>16b</summary>
<div id="blocklyDiv16" style="height: 300px;"></div>
<script>brender("(def (log2b intersect steps) (return (partial (log2a intersect steps))))", "blocklyDiv16")</script>
</details>

::: {.hidden}
```{python}
def log2b(intersect, steps):
    return partial(log2a, intersect, steps)
```
:::


<details>
<summary>18a</summary>
<div id="blocklyDiv18a" style="height:100px"></div>
<script>brender("(mapv (log2b 1 1) [8 16 32])", "blocklyDiv18a")</script>
</details>

::: {.column-margin}
<details>
<summary>18b</summary>
<div style="width: 350px">
```{python}
mapv(log2b(1, 1), [8, 16, 32])
```
</div>
</details>
:::

<details>
<summary>20a</summary>
<div id="divlog20_2" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.log2b("divlog20_2");
</script>
<span onClick=statejs.log23.log2b("divlog20_2") style="color:blue">1</span>
<span onClick=statejs.log23.log2banim2() style="color:blue">2</span>
</details>

</details>

<details>
<summary>20d</summary>
<div id="divlogtri" class="jxgbox" style="height:300px;"></div>
<script>
statejs.strfrac1ovX = "$$\\frac{1}{x}$$";
statejs.log23.logtri("divlogtri");
</script>
<span onClick=statejs.log23.logtri("divlogtri") style="color:blue">1</span>
<span onClick="statejs.log23.trianim2()" style="color:blue">2</span>
<span onClick="statejs.log23.trianim3()" style="color:blue">3</span>
<span onClick="statejs.log23.trianim4()" style="color:blue">4</span>
<span onClick="statejs.log23.trianim5()" style="color:blue">5</span>
<span onClick="statejs.log23.trianim6()" style="color:blue">6</span>
<span onClick="statejs.log23.trianim7()" style="color:blue">7</span>
</details>

<details>
<summary>17a</summary>
<div id="blocklyDiv17a" style="height:300px"></div>
<script>var ws17a = brender("(mapv (log2b 1 0.7) [x y z])", "blocklyDiv17a")
var ab = addBlocks(ws17a);
</script>
<span onClick="ab('(D :tiles/slot)')" style="color:blue">D</span>
</details>

::: {.column-margin}
<details>
<summary>17b</summary>
<div style="width: 350px">
```{python}
mapv(log2b(1, 0.7), [x, y, z])
```
</div>
</details>
:::

<details>
<summary>21b</summary>
```{python}
[e.evalf() for e in        mapv(D(log2b(1, 0.7)), [x, y, z])]
```

<div id="blocklyDiv22a" class="jxgbox" style="height:100px"></div>
<script>brender("(mapv (D ln) [x y z])", "blocklyDiv22a")</script>
```{python}
mapv(D(ln), [x, y, z])
```
</details>

<script>
document.querySelectorAll("details")
.forEach(d => d.setAttribute("open", ""))
</script>