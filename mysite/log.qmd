---
title: "Drawing on the Logarithmic Scale"
format:
  html:
    minimal: true
    code-fold: false
    code-summary: "N.A."
    echo: true
    self-contained: false
    smooth-scroll: true
jupyter: python3
execute:
  cache: true
---
<!--
Before publishing:
* set cache to false
* outcomment scittle nrepl
* open all sections
* "/site/jsfiles/blockly/static/media/"
* "/site/jsfiles/GClef.svg"
* set current youtube video

Todo:
1-3 mit neuem Mikro
4 ok
5 genauer
6 ok
7 neu
8 darum auch
9 - 11 ok
-->

<script>
document.addEventListener('contextmenu', event => event.preventDefault());
</script>
<script type="text/javascript" charset="UTF-8"
 src="jsfiles/jsxgraph/distrib/jsxgraphcore.js"></script>
<link rel="stylesheet" type="text/css" href="jsfiles/jsxgraph/distrib/jsxgraph.css" />

<script>var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;</script>
<script src="jsfiles/scittle/dist/scittle.js" type="application/javascript"></script>
<script src="jsfiles/scittle/dist/scittle.nrepl.js" type="application/javascript"></script>
<script src="jsfiles/blockly/blockly_compressed.js"></script>
<!--
<script src="jsfiles/blockly/msg/en.js"></script>
-->
<script src="jsfiles/twotiles/twotiles_core.js"></script>

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/css/syntax.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/bootstrap/css/bootstrap.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/inline-edit/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/log.css">


<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var cleandiv = (divid) => {
const el = document.getElementById(divid);
while (el.firstChild) el.removeChild(el.firstChild);
}
var brenderT = (code,divid, bTrash) => {
cleandiv(divid);
let ws = Blockly.inject(divid,
{"sounds": false,
"scrollbars": false,
"trashcan": bTrash,
"media": "/jsfiles/blockly/static/media/"});

Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)), ws);

return ws;
}

var brender = (code,divid) => brenderT(code,divid, false)
</script>

<script>var statejs = {};</script>

<script>
const delay = ms => new Promise(res => setTimeout(res, ms));
</script>

::: {.hidden}
```{python}
#|code-fold: true
#|code-summary: "Code Preamble"

import sympy
from sympy import symbols, diff, ln
from sympy.codegen.cfunctions import log2
import functools
import matplotlib.pyplot as plt

x0=symbols("x0")
x1=symbols("x1")

def call(f, x):
    return f(x)

def mapv(a, b):
    return list(map(a, map(lambda x: 1.0 * x, b)))

def mapv_indexed(f, coll):
    return list(map(lambda x: [x, f(x)], map(lambda x: 1.0 * x, coll)))

class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

class Transducer(PipeAsCall):
  pass

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))

def D(f):
  var = symbols("var")
  return PipeAsCall(sympy.lambdify([var], diff(f(var), var), "sympy"))

def rnd(expr):
     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})

def plot(f, x):
    if (type(f)==str) or (type(f)==sympy.core.numbers.Float):
       return "That's not something you can plot"
    else:
       plt.plot(x, mapv(f, x), "o")

def plotting(f):
    if type(f) == Transducer:
        return partial(lambda f, coll: plt.plot(list(map(lambda x: x[0],f(coll))),list(map(lambda x: x[1],f(coll))), "o"), f)
    else:
        return partial(lambda f, x: plt.plot(x, mapv(f, x), "o"), f)

isPositive = lambda n: True if n>0 else False

def smaller(x):
    return lambda n: True if n<x else False

def filtering(f):
    return Transducer(functools.partial(lambda f,coll: list(filter(f, coll)), f))

def mapping(f):
    return Transducer(functools.partial(mapv_indexed, f))

def compose(f, g):
    return Transducer(lambda x: f(g(x)))
```
:::

::: {.hidden}
```{python}
frequencies = [16.35, 17.32, 18.35, 19.45, 20.6, 21.83, 23.12, 24.5, 25.96, 27.5, 29.14, 30.87, 32.7, 34.65, 36.71, 38.89, 41.2, 43.65, 46.25, 49.0, 51.91, 55.0, 58.27, 61.74, 65.41, 69.3, 73.42, 77.78, 82.41, 87.31, 92.5, 98.0, 103.83, 110.0, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185.0, 196.0, 207.65, 220.0, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.0, 415.3, 440.0, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.0, 932.33, 987.77, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760.0, 1864.66, 1975.53, 2093.0, 2217.46, 2349.32, 2489.0, 2637.0, 2793.83, 2959.96, 3135.96, 3322.44, 3520.0, 3729.31, 3951.0, 4186.0, 4434.92, 4698.63, 4978.0, 5274.0, 5587.65, 5919.91, 6271.93, 6644.88, 7040.0, 7458.62, 7902.13]
```
:::

::: {.hidden}
```{python}
import numpy as np
import json
import inspect

# https://muted.io/note-frequencies/
data = np.genfromtxt('notes.txt', delimiter='\t', dtype=str)
row_names = data[:, 0].tolist()
numerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()

nofreq = [item
    for subl in
      [list(map(lambda n,f: [n, idx, f], row_names, fs))
        for idx, fs in enumerate(numerical_data)]
   for item in subl]

frequencies = [n[2] for n in nofreq]
```
:::

::: {.hidden}
```{python}
#| output: asis

print("<script>")
print("statejs['notenames']= ")
print(json.dumps(row_names))
print("statejs['frequencies']= ")

print(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith("s")]))
print("</script>")

# instead of using the plain js
# print("<script src='jsfiles/notes.js'></script>")
# we load the respective Scittle code

print("<script>")
with open('notes.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
> The Pythagoreans have shown that the pitch of a tone depends on the length of a cord. This was the first successful reduction of quality to quantity and therefore the beginning of science.  
> - Arthur Koestler, the Sleepwalkers
-->

<details>
<summary id="1">1</summary>
<div id="divnotes2" class="jxgbox" style="height:300px;"></div>
<script>statejs.notes.main("divnotes2");</script>

<span onClick=statejs.notes.main('divnotes2') style="color:blue">A</span>
<span onClick="statejs.notes.anim1()" style="color:blue">B</span>
<span onClick="statejs.notes.anim2()" style="color:blue">C</span>
<span onClick="statejs.notes.anim3()" style="color:blue">D</span>
<span onClick="statejs.notes.anim5()" style="color:blue">E</span>
<span onClick="statejs.notes.anim6()" style="color:blue">F</span>
<div class="desc" id="divnotes2_t">
The musical scale is logarithmic -- I am going to use this concrete example for showing my general way of doing mathematical plots.
</div>
</details>

::: {.column-margin}
<a href="#1" onClick="statejs.notes.anim6();">_</a>
:::

<script>var wslog2; //for .markFocused() , but that does not prevent the scrolling down to the last workspace</script>

<details>
<summary onClick=cleandiv('divnotes2_t') id="2">2</summary>
<div onClick="wslog2.markFocused();" id="blocklyDivLog2" style="height: 300px;"></div>
<script>
function v2() {
wslog2=brender("(:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDivLog2");
}
v2();
</script>
<div class="desc" id="blocklyDivLog2_t">
The notes above are fitted by log2. For the specific plot, I had to make a choice for some scale factors. They are mostly a matter of coincidence and taste, but for moving on you need to fix them. -- If you want, you can play with the formula yourself. At the following address

<a href="https://kloimhardt.github.io/site/log.html" style="font-size: 24px">https://kloimhardt.github.io/site/log.html</a>

you find this notebook online. In its appendix you can also find a Jupyter notebook containing the ensuing code snippets. But I have jumped ahead. My story starts with the Python language. And plotting just the plain log2. And that already hits upon the main message of my presentation.
</div>
</details>

::: {.column-margin}
<a href="#2" onClick="v2();">_</a>
:::

::: {.hidden}
```{python}
#| output: asis
print("<script>")
with open('log23.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
::: {.column-margin}
<details>
<summary>--</summary>
<div id="divlog23" class="jxgbox" style="height:150px; width: 350px"></div>
<script>
statejs.log23.main("divlog23");
statejs.log23.anim2();
</script>
</details>
:::
-->

<details>
<summary onClick="cleandiv('blocklyDivLog2_t')" id="5">3</summary>
<div id="blocklyDiv10" style="height: 150px; width: 800px"></div>
<script>brender("(plot log2 [1 2 4 8])", "blocklyDiv10")</script>


```{python}
plot(log2, [1, 2, 4, 8])
```

<div class="desc" id="blocklyDiv10_t">
The message is this. -- It is the log2 that you plot. This is so obvious that I'd like to state what log2 is not. It is not the log2 of x or y or z. Also, it is not some text that contains the string log2. Rather, log2 is a mathematical object. Only objects like this are suitable for plotting within the paradigm of my presentation.
</div>

<script>
var clean5 = () => { brender("(plot log2 [1 2 4 8])", "blocklyDiv10"); cleandiv("blocklyDiv10_t");}
</script>
</details>

::: {.column-margin}
<a href="#5">_</a>
:::

<details>
<summary onClick=clean5() id="3">4</summary>
<div id="divmanylogs" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.many("divmanylogs");

const mywait = async () => {
  statejs.log23.manyanim2(110, 7);
  await delay(500);
  statejs.log23.manyanim2(440, 7);
  await delay(500);
  statejs.log23.manyanim2(880, 7);
};

var clean3 = () => {mywait(); cleandiv("divmanylogs_t")}
</script>

<span onClick=statejs.log23.many("divmanylogs") style="color:blue">A</span>
<span onClick=mywait() style="color:blue">B</span>
<div class="desc" id="divmanylogs_t">
I am aware that you need some time for digesting my self-imposed plotting restrictions. So I move more towards the practical goal. -B- I need to get more to something like this. For that, I need to get back to the formula I showed at the start.
</div>

</details>
::: {.column-margin}
<a href="#3">_</a>
:::

<details>
<summary onClick=clean3() id="4">5</summary>
<div id="blocklyDiv5" style="height: 350px;"></div>
<script>
var rws5 = () => brender(" (:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDiv5");

var addBlocks = (ws) => (s) =>
Blockly.Xml.appendDomToWorkspace(Blockly.utils.xml.textToDom(parse(s)), ws);

var abws5 = addBlocks(rws5());
</script>

<span onClick="abws5 = addBlocks(rws5())" style="color:blue">A</span>
<span onClick="abws5('(def (Poe intersect steps x) :tiles/slot)');" style="color:blue">C</span>
<span onClick="abws5('(return :tiles/slot)');" style="color:blue">D</span>
<span onClick="abws5('(Poe intersect steps 440)')" style="color:blue">E</span>
<div class="desc" id="blocklyDiv5_t">
The formula I showed at the start is not something you can plot. -B- This is the main theme again. The theme is that I need a proper mathematical target to plot. To arrive at such a target, it is necessary to bind the formula to a procedure. -C- The procedure itself I gave the name Poe. It takes three arguments. Two parameters and the frequency x. -D- The procedure does the wanted computation. -- It returns the value given by the formula. -E- In its code, you have to replace the numbers with the names of the two parameters. -- I provide the procedure as Python code. -F-
</div>
</details>

<script>
var four_ = () => {
var ws4u = brender(" (def (Poe intersect steps x) (return (:tiles/infix (* (log2 (:tiles/infix (/ x intersect))) steps))))", "blocklyDiv5");
var abws4u = addBlocks(ws4u);
abws4u('(Poe 220 7 440)')
}
</script>

::: {.column-margin}
<a href="#4" onClick=four_()>_</a>

<details>
<summary>B</summary>
<div style="width: 300px">
```{python}
plot("log2(x / 220) * 7", [1, 2, 4, 8])
```
</div>
</details>
<details>

<summary>F</summary>
<div style="width: 300px">
```{python}
def Poe(intersect, steps, x):
    return log2(x/intersect) * steps

Poe(220, 7, 440)
```
</div>
</details>
:::


<!--
<details>
<summary>--</summary>
<div id="jjjobs">
<div class="cljs-editor-new"><pre>(do (defn add-blocks [s] (display-html (str "&lt;tiles&gt;" s "&lt;/tiles&gt;")) :tiles)

(add-blocks '(def (log2a intersect steps x) (return :tiles/slot))))
(add-blocks '(log2a 220 7 440))
(add-blocks '(log2a 1 1 2))</pre></div>
</div>
</details>

<script src="jsfiles/rigsomelight.com/assets/inline-edit/main.js"></script>

<script>
function mutationCallback(customFn, mutationsList, observer) {
      mutationsList.forEach((mutation) => {
        if (mutation.target.className == "cljs-html-display active" &&
            mutation.type == "childList") {
        customFn(mutation.target.childNodes[0].innerText);
        }
    });
}

const observer = new MutationObserver(mutationCallback.bind(null, addBlocks(ws5)));
const targetNode = document.getElementById("jjjobs");
const config = { attributes: true, childList: true, subtree: true };
observer.observe(targetNode, config);
</script>

-->

<!--
:::{.column-screen-left}
<details>
<summary>xx</summary>
<table>
<tr>
<td style="vertical-align: top">
<div id="blocklyDivLog21" style="height: 150px; width: 230px"></div>
<script>brender("(log2 x)", "blocklyDivLog21")</script>
</td>
<td>
<div id="divlog2x" class="jxgbox" style="height:300px; width: 800px"></div>
<script>
statejs.log23.log3("divlog2x");
</script>
<span onClick=statejs.log23.log3("divlog2x") style="color:blue">1</span>
<span onClick=statejs.log23.log3anim2() style="color:blue">2</span>
<span onClick=statejs.log23.log3anim3() style="color:blue">3</span>
</td>
</tr>
</table>
</details>
:::
-->

:::{.column-screen-left}
<details>
<summary onClick=cleandiv("blocklyDiv5_t") id="6">6</summary>
<table><tr>
<td style="vertical-align: top">
<div style="width: 230px"><img src="jsfiles/xkcd_partial.jpg" style="horizontal-align: right"></img></div>
</td>
<td style="vertical-align: top">
<div id="blocklyDiv14" style="height: 400px; width: 800px"></div>
<script>
var r14= () => brenderT("(plot log2 [1 2 4 8])", "blocklyDiv14", true);
var addws6 = addBlocks(r14());
</script>
<span onClick="addws6 = addBlocks(r14())" style="color:blue">A</span>
<span onClick="addws6('(Poe 220 7 440)');" style="color:blue">B</span>
<span onClick="addws6('(partial Poe :tiles/slot :tiles/slot)');" style="color:blue">D</span>
<span onClick="addws6('(log2b intersect steps)'); addws6('(log2b intersect steps)'); addws6('(def :tiles/slot (return :tiles/slot))') " style="color:blue">F</span>
<div class="desc" id="blocklyDiv14_t">
I can plot log2 because it is a mathematical object. -B- But still I cannot plot the procedure Poe. -C- I need an operation called "partial" to transform Poe into the proper target to plot. -D- The procedure named "partial" takes "Poe" as an argument. -- Then I can perform the plotting. -E-  Here is the main theme in spades: "partial" taking a procedure to deliver the target to plot. -F- I turn all this into yet another procedure named log2b -- That is very convenient for plotting. -G-
<div style="height: 200px;"></div>
</div>
</td>
</tr></table>

</details>
:::

::: {.hidden}
```{python}
def log2b(intersect, steps):
    return partial(Poe, intersect, steps)
```
:::

::: {.column-margin}
<a href="#6" onClick="var ws6t=brender('(def (log2b intersect steps) (return (partial Poe intersect steps)))', 'blocklyDiv14'); addBlocks(ws6t)('(plot (log2b 220 7) [1 2 4 8])');">_</a>
<details>
<summary>C</summary>
<div style="width: 305px">
```{python}
plot(Poe(220, 7, 440), [1, 2, 4, 8])
```
</div>
</details>

<details>
<summary>E</summary>
<div style="width: 305px">
```{python}
plot(partial(Poe, 220, 7), [1, 2, 4, 8])
```
</div>
</details>

<details>
<summary>G</summary>
<div style="width: 305px">
```{python}
plot(log2b(220, 7), [1, 2, 4, 8])
```
</div>
</details>
:::

<details>
<summary onClick=cleandiv('blocklyDiv14_t') id="9">7</summary>
<div id="blocklyDiv19" style="height: 300px;"></div>
<script>
var r19 = () => brenderT("(plot (log2b 220 7) [1 2 4 8])", "blocklyDiv19", true);
var abws19 = addBlocks(r19());
</script>
<span onClick="abws19 = addBlocks(r19())" style="color:blue">A</span>
<span onClick="abws19('(call :tiles/slot :tiles/slot)')" style="color:blue">B</span>
<span onClick="abws19('x0')" style="color:blue">D</span>
<span onClick="abws19('x1')" style="color:blue">F</span>
<span onClick="abws19('0.7')" style="color:blue">G</span>

<div class="desc" id="blocklyDiv19_t">
Not only can log2b be plotted. -B- Log2b can also be called. -C- Not only can log2b be called with data of type number. Log2b can also be called with a symbol. -DE- Using symbols along with numbers is possible thanks to a package named Sympy. Here you see that for the name of the symbol I chose x-naught. But x-naught is only the default of possible choices. As a symbol, for example, I can also choose x1. -F- For log2b, the x1 is just yet another data that happens to be of type symbol. This idea of "symbols as data" is the source for my freedom of choice. Before being able to process some data, log2b needs to be initialized with two parameters. -G- But these do not need to be of type integer. The float 0.7 does nicely as well. -a-
</div>
</details>

<script>
var fu19 = () => {
var ws19_E = brenderT("(call (log2b 1 0.7) x1)", "blocklyDiv19", true);
var abws19_E = addBlocks(ws19_E);
// abws19_E('(call (log2b 1 1) x1)')
// abws19_E('(call (log2b 1 0.7) x1)')
}
</script>

::: {.column-margin}
<a href="#9" onClick="fu19();">_</a>
<details>
<summary>C</summary>
<div style="width: 300px">
```{python}
call(log2b(220, 7), 8)
```
</div>
</details>
<details>
<summary>E</summary>
<div style="width: 300px">
```{python}
call(log2b(220, 7), x0)
```
</div>
</details>

<details>
<summary>a</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 0.7), x1)
```
</div>
</details>
:::

<details>
<summary onClick="cleandiv('blocklyDiv19_t')" id="11">8</summary>
<div id="divlogtri" class="jxgbox" style="height:300px;"></div>
<script>
statejs.strfrac1ovX = "$$\\frac{1}{x}$$";
statejs.log23.logtri("divlogtri");
</script>
<span onClick=statejs.log23.logtri("divlogtri") style="color:blue">A</span>
<span onClick="statejs.log23.trianim2()" style="color:blue">B</span>
<span onClick="statejs.log23.trianim3()" style="color:blue">C</span>
<span onClick="statejs.log23.trianim4()" style="color:blue">D</span>
<span onClick="statejs.log23.trianim5()" style="color:blue">E</span>
<span onClick="statejs.log23.trianim6()" style="color:blue">F</span>
<span onClick="statejs.log23.trianim7()" style="color:blue">G</span>
<div class="desc" id="divlogtri_t">
I would not have bothered you with my O point seven invention, hadn't I discovered it to be a segue to the natural logarithm. -B- In general, you can fit a series of triangles onto any curve. -C- Moving those triangles to the ground level reveals -D- that a new curve "one over x" fits their heights quite agreeably. &minus;E&minus; You can also try the other way around -F- That does not work quite as well. -G- The trick is to shrink the area while retaining the angles.
</div>
</details>

::: {.column-margin}
<a href="#11">_</a>
:::

<details>
<summary onClick="cleandiv('divlogtri_t');" id="12">9</summary>
<div id="blocklyDiv17a" style="height:150px"></div>
<script>
var f17a = () => brender("(call (log2b 1 0.7) x0)", "blocklyDiv17a")
var ab = addBlocks(f17a());
</script>
<span onClick="ab = addBlocks(f17a())" style="color:blue">A</span>
<span onClick="ab('(D :tiles/slot)')" style="color:blue">D</span>
<div class="desc" id="blocklyDiv17a_t">
I hope my triangles just formed an agreeable entertainment. For me they were (while making them). In conclusion, I assume you caught on to the topic I am aiming at: -D- differentiation. -- Taking the derivative of log2b is simple and easy.
</div>
</details>

::: {.column-margin}
<a href="#12" onClick="brender('(call (D (log2b 1 0.7)) x0)', 'blocklyDiv17a');">_</a>
:::

<details>
<summary onClick=cleandiv('blocklyDiv17a_t'); id="13">10</summary>
```{python}
call(D(log2b(1, 0.7)), x0).evalf()
```

<div id="blocklyDiv22a" style="height:100px"></div>
<script>
var r13 = () => brender("(call (D ln) x0)", "blocklyDiv22a");
r13();
</script>
```{python}
call(D(ln), x0)
```
<div class="desc" id="blocklyDiv22a_t">
With the log2b initialized at O point seven, I calculate its derivative. As a result I almost get one over x. To become exact, I need to switch to "ln", the natural logarithm. The pictures above can, within this presentation, be called its pinnacle. As a kind of confirmation, I'd like to drop some names. In math, the procedure named "call" is a functional while D is an operator. In computer science, both is called functions of higher order. The natural logarithm "ln" of course is a function in any field.
</div>
</details>

::: {.column-margin}
<a href="#blocklyDiv22a" onClick="r13();">_</a>
:::

<details>
<summary onClick="cleandiv('blocklyDiv22a_t');" id="14">--</summary>
$$\Large \left. \frac{d \ln(x)}{dx} \right|_{x=x_0}$$
<div class="desc" id="tex14_t">
I'd like to wind down with a note on notation. When I differentiate a function like "ln" and then evaluate that derivative at x-naught, the common notation is the vertical bar. This bar is also called "pipe".
</div>
</details>

::: {.column-margin}
<a href="#blocklyDiv22a">_</a>
:::

<details>
<summary onClick="cleandiv('tex14_t');" id="15">--</summary>
<div id="blocklyDivpipe" style="height:300px"></div>
<script>
var r15 = () => brenderT("(call (D ln) x0)", "blocklyDivpipe", true);
var add15x = addBlocks(r15());
</script>
<span onClick='add15x = addBlocks(r15());' style="color:blue">A</span>
<span onClick="add15x('(:tiles/slot :tiles/slot)')" style="color:blue">B</span>
<div class="desc" id="blocklyDivpipe_t">
In taking this inspiration from math, I use pipe in my pictures as well. -B- Note: it's not the D operator which is replaced by the pipe, but it's the "call" that is dropped. -- Not only can "pipe" be used in pictures. The pipe can also be used within Python code. -C- You might think that my notation for pipe is hard to achieve. This is not so. My custom pipe is a few lines of Python only. -- The pipe symbol is an invented alternative notation. In the following finale, I'd like to discover its explanatory virtues.
</div>
</details>

::: {.column-margin}
<a href="#15" onClick="brenderT('((D ln) x0)', 'blocklyDivpipe', true)">_</a>
<details>
<summary>C</summary>
```{python}
(D(ln) | x0)
```
</details>

<details>
<summary>--</summary>
<div style="width: 300px">
```{python}
#| eval: false
class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))
```
</div>
</details>
:::

<details>
<summary onClick="cleandiv('blocklyDivpipe_t');" id="16">11</summary>
<div id="blocklyDivTrans" style="height: 500px;"></div>
<script>
var fTra = () => brenderT("(plot ln [1 2 4 8])", "blocklyDivTrans", true);
var abwsTra = addBlocks(fTra());
</script>

<span onClick='abwsTra = addBlocks(fTra());'  style="color:blue">A</span>
<span onClick="abwsTra('((plotting :tiles/slot) :tiles/slot)')" style="color:blue">B</span>
<span onClick="abwsTra('frequencies')" style="color:blue">C</span>
<span onClick="abwsTra('((filtering (smaller 900)) :tiles/slot)')" style="color:blue">E</span>
<span onClick="abwsTra('(compose (mapping :tiles/slot) :tiles/slot)')" style="color:blue">G</span>
<span onClick="abwsTra('(D :tiles/slot)')" style="color:blue">b</span>
<div class="desc" id="blocklyDivTrans_t">
The pipe notation is very versatile. I can also use it when plotting something. -B- In my dataset, the highest frequency is eight kilohertz. -CD- I'd like to cut that down to 900 cycles per second. -E- So I apply a filter -- and plot. -F- I want to move the filtering to the left. Or in a more picturesque manner: I want the filtering to be ahead of the pipes. For this, I use function composition. -G- This composition is completely decoupled from input sources and output formats. This leads to a method commonly known as "transducing" -- Transducers are ahead of the pipe. -a- For sure you can insert differentiation into the composition as easily as ever. -bc-
</div>
</details>

::: {.column-margin}
<a href="#16">_</a>

<details>
<summary>D</summary>
<div style="width: 310px">
```{python}
(plotting(ln) | frequencies)
```
</div>
</details>

<details>
<summary>F</summary>
<div style="width: 310px">
```{python}
(plotting(ln) |
  (filtering(smaller(900)) |
    frequencies))
```
</div>
</details>

<details>
<summary>a</summary>
<div style="width: 310px">
```{python}
(plotting
  (compose
    (mapping(ln), 
     filtering(smaller(900)))) |
  frequencies)
```
</div>
</details>

<details>
<summary>c</summary>
<div style="width: 310px">
```{python}
(plotting
  (compose
    (mapping(D(ln)), 
     filtering(smaller(900)))) |
  frequencies)
```
</div>
</details>
:::

<div style="height: 900px;"></div>

<details>
<summary id="appendix">Appendix</summary>

Try the Jupyter notebook:

* go to the Jupyter-lite web page <a href=https://jupyter.org/try-jupyter/lab/ target="_blank">https://jupyter.org/try-jupyter/lab/</a>
* click `File -> Open from URL`
* paste the following URL: `https://raw.githubusercontent.com/kloimhardt/site/main/mysite/log.ipynb`
* select the "Pyodide" Kernel and click `Run -> Run All Cells`

This notebook was generated using Quarto. 

* Walkthrough video for the notebook: <a href=https://youtu.be/cGcdgJ-V8cU target="_blank">https://youtu.be/cGcdgJ-V8cU</a>
* The source code can be viewed here: <a href=https://github.com/kloimhardt/site/blob/main/mysite/log.qmd target="_blank">https://github.com/kloimhardt/site/blob/main/mysite/log.qmd</a>

The idea for this Python notebook is based on an older interactive workspace:

* Watch the <a href=https://www.youtube.com/watch?v=m1HbWpWiTk4&t=468s target="_blank">Clojure visual-tools meeting from 2022</a>
* Try out the workspace at <a href=https://kloimhardt.github.io/cljtiles.html?page=FDG001 target="_blank">https://kloimhardt.github.io/cljtiles.html?page=FDG001</a>
* Maybe also try <a href=https://kloimhardt.github.io/cljtiles.html?page=116 target="_blank">https://kloimhardt.github.io/cljtiles.html?page=116</a>
</details>

<!--
<script>
document.querySelectorAll("details")
.forEach(d => d.setAttribute("open", ""))
</script>
-->
<script>
document.querySelectorAll("details")
.forEach(d => d.setAttribute("open", ""))
</script>