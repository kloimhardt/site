---
title: "Drawing on the Logarithmic Scale"
format:
  html:
    minimal: true
    code-fold: false
    code-summary: "N.A."
    echo: true
    self-contained: false
    smooth-scroll: true
jupyter: python3
execute:
  cache: true
---
<!--
Before publishing:
* set cache to false
* outcomment scittle nrepl
* open all sections

Todo:
1-3 mit neuem Mikro
4 ok
5 genauer
6 ok
7 neu
8 darum auch
9 - 11 ok
-->

<script>
document.addEventListener('contextmenu', event => event.preventDefault());
</script>
<script type="text/javascript" charset="UTF-8"
 src="jsfiles/jsxgraph/distrib/jsxgraphcore.js"></script>
<link rel="stylesheet" type="text/css" href="jsfiles/jsxgraph/distrib/jsxgraph.css" />

<script>var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;</script>
<script src="jsfiles/scittle/dist/scittle.js" type="application/javascript"></script>
<script src="jsfiles/scittle/dist/scittle.nrepl.js" type="application/javascript"></script>
<script src="jsfiles/blockly/blockly_compressed.js"></script>
<script src="jsfiles/blockly/msg/en.js"></script>
<script src="jsfiles/twotiles/twotiles_core.js"></script>

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/css/syntax.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/bootstrap/css/bootstrap.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/inline-edit/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/log.css">


<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var cleandiv = (divid) => {
const el = document.getElementById(divid);
while (el.firstChild) el.removeChild(el.firstChild);
}
var brenderT = (code,divid, bTrash) => {
cleandiv(divid);
let ws = Blockly.inject(divid,
{"sounds": false,
"scrollbars": false,
"trashcan": bTrash,
"media": "/jsfiles/blockly/static/media/"});

Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)), ws);

return ws;
}

var brender = (code,divid) => brenderT(code,divid, false)
</script>

<script>var statejs = {};</script>

<script>
const delay = ms => new Promise(res => setTimeout(res, ms));
</script>

::: {.hidden}
```{python}
#|code-fold: true
#|code-summary: "Code Preamble"

import sympy
from sympy import symbols, diff, ln
from sympy.codegen.cfunctions import log2
import functools
import matplotlib.pyplot as plt

x0=symbols("x0")
x1=symbols("x1")

def call(f, x):
    return f(x)

def mapv(a, b):
    return list(map(a, map(lambda x: 1.0 * x, b)))

def mapv_indexed(f, coll):
    return list(map(lambda x: [x, f(x)], map(lambda x: 1.0 * x, coll)))

class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

class Transducer(PipeAsCall):
  pass

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))

def D(f):
  var = symbols("var")
  return PipeAsCall(sympy.lambdify([var], diff(f(var), var), "sympy"))

def rnd(expr):
     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})

def plot(f, x):
    if str(f)==f:
       return "That's not something you can plot"
    else:
       plt.plot(x, mapv(f, x), "o")

def plotting(f):
    if type(f) == Transducer:
        return partial(lambda f, coll: plt.plot(list(map(lambda x: x[0],f(coll))),list(map(lambda x: x[1],f(coll))), "o"), f)
    else:
        return partial(lambda f, x: plt.plot(x, mapv(f, x), "o"), f)

isPositive = lambda n: True if n>0 else False

def filtering(f):
    return Transducer(functools.partial(lambda f,coll: list(filter(f, coll)), f))

def mapping(f):
    return Transducer(functools.partial(mapv_indexed, f))

def compose(f, g):
    return Transducer(lambda x: f(g(x)))
```
:::

::: {.hidden}
```{python}
#| output: asis

import numpy as np
import json
import inspect

# https://muted.io/note-frequencies/
data = np.genfromtxt('notes.txt', delimiter='\t', dtype=str)
row_names = data[:, 0].tolist()
numerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()
               
print("<script>")
print("statejs['notenames']= ")
print(json.dumps(row_names))
print("statejs['frequencies']= ")

nofreq = [item
    for subl in
      [list(map(lambda n,f: [n, idx, f], row_names, fs))
        for idx, fs in enumerate(numerical_data)]
   for item in subl]


print(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith("s")]))
print("</script>")

# instead of using the plain js
# print("<script src='jsfiles/notes.js'></script>")
# we load the respective Scittle code

print("<script>")
with open('notes.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
> The Pythagoreans have shown that the pitch of a tone depends on the length of a cord. This was the first successful reduction of quality to quantity and therefore the beginning of science.  
> - Arthur Koestler, the Sleepwalkers
-->

<details>
<summary id="1">1</summary>
<div id="divnotes2" class="jxgbox" style="height:300px;"></div>
<script>statejs.notes.main("divnotes2");</script>

<span onClick=statejs.notes.main('divnotes2') style="color:blue">A</span>
<span onClick="statejs.notes.anim1()" style="color:blue">B</span>
<span onClick="statejs.notes.anim2()" style="color:blue">C</span>
<span onClick="statejs.notes.anim3()" style="color:blue">D</span>
<span onClick="statejs.notes.anim5()" style="color:blue">E</span>
<span onClick="statejs.notes.anim6()" style="color:blue">F</span>
<div class="desc" id="divnotes2_t">
Sometimes, you need to start with the basics. I am sure you have your own ways to do mathematical plots. My own way for plotting has, I think, its merits. But that's for you to decide. I'll come to its main quality in a minute. But as a first step, I needed to make a choice for the mathematical target to plot. I chose the musical scale. -- The notes are logarithmic.
</div>
</details>

::: {.column-margin}
<a href="#1" onClick="statejs.notes.anim6();">_</a>
:::

<script>var wslog2; //for .markFocused() , but that does not prevent the scrolling down to the last workspace</script>

<details>
<summary onClick=cleandiv('divnotes2_t') id="2">2</summary>
<div onClick="wslog2.markFocused();" id="blocklyDivLog2" style="height: 300px;"></div>
<script>
function v2() {
wslog2=brender("(:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDivLog2");
}
v2();
</script>
<div class="desc" id="blocklyDivLog2_t">
It is not the plain log2 that fits the notes. There need to be some scale factors. -- You can play with the formla yourself, because this notebook is online at the following address

<a href="https://kloimhardt.github.io/site/log.html" style="font-size: 24px">https://kloimhardt.github.io/site/log.html</a>

But I have jumped ahead. The story starts with the language Python and plotting the plain log2. And that already hits upon the main message of my presentation.
</div>
</details>

::: {.column-margin}
<a href="#2" onClick="v2();">_</a>
:::

::: {.hidden}
```{python}
#| output: asis
print("<script>")
with open('log23.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
::: {.column-margin}
<details>
<summary>--</summary>
<div id="divlog23" class="jxgbox" style="height:150px; width: 350px"></div>
<script>
statejs.log23.main("divlog23");
statejs.log23.anim2();
</script>
</details>
:::
-->

<details>
<summary onClick="cleandiv('blocklyDivLog2_t')" id="5">3</summary>
<div id="blocklyDiv10" style="height: 150px; width: 800px"></div>
<script>brender("(plot log2 [1 2 4 8])", "blocklyDiv10")</script>


```{python}
plot(log2, [1, 2, 4, 8])
```

<div class="desc" id="blocklyDiv10_t">
The message is this. -- It is the log2 that you plot. This is so obvious that I'd like to state what log2 is not. It is not the log2 of x or y or z. Also, it is not some text that contains the string log2. Rather, log2 is a mathematical object. It is only objects like this that my Python routine can plot.
</div>

<script>
var clean5 = () => { brender("(plot log2 [1 2 4 8])", "blocklyDiv10"); cleandiv("blocklyDiv10_t");}
</script>
</details>

::: {.column-margin}
<a href="#5">_</a>
:::

<details>
<summary onClick=clean5() id="3">4</summary>
<div id="divmanylogs" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.many("divmanylogs");

const mywait = async () => {
  statejs.log23.manyanim2(110, 7);
  await delay(500);
  statejs.log23.manyanim2(440, 7);
  await delay(500);
  statejs.log23.manyanim2(880, 7);
};

var clean3 = () => {mywait(); cleandiv("divmanylogs_t")}
</script>

<span onClick=statejs.log23.many("divmanylogs") style="color:blue">A</span>
<span onClick=mywait() style="color:blue">B</span>
<div class="desc" id="divmanylogs_t">
I am aware that you need some time for digesting my self-imposed plotting restrictions. So I move more towards the practical goal. -- I need to get more to something like this. For that, I need to get back to the formula I showed at the start.
</div>

</details>
::: {.column-margin}
<a href="#3">_</a>
:::

<details>
<summary onClick=clean3() id="4">5</summary>
<div id="blocklyDiv5" style="height: 350px;"></div>
<script>
var ws5 = brender(" (:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDiv5");

var addBlocks = (ws) => (s) =>
Blockly.Xml.appendDomToWorkspace(Blockly.utils.xml.textToDom(parse(s)), ws);
var abws5 = addBlocks(ws5);
</script>

<span style="color:blue">A</span>
<span onClick="abws5('(def (Poe intersect steps x) :tiles/slot)');" style="color:blue">C</span>
<span onClick="abws5('(return :tiles/slot)');" style="color:blue">D</span>
<span onClick="abws5('(Poe intersect steps 440)')" style="color:blue">E</span>
<div class="desc" id="blocklyDiv5_t">
The formula I showed at the start is not something you can plot. -B- This is the main theme again. I need a proper mathematical target to plot. -C- To get such a target, I need to bind this formula to a procedure. The procedure itself I gave the name Poe. It takes three arguments. Two parameters and the frequency x. -D- The procedure does the necessary computation, it returns the value given by the formula. -E- In its code, you have to replace the numbers with the two parameters. -F- I provide the procedure as Python code.
</div>
</details>

<script>
var four_ = () => {
var ws4u = brender(" (def (Poe intersect steps x) (return (:tiles/infix (* (log2 (:tiles/infix (/ x intersect))) steps))))", "blocklyDiv5");
var abws4u = addBlocks(ws4u);
abws4u('(Poe 220 7 440)')
abws4u('(Poe 1 1 2)')
}
</script>

::: {.column-margin}
<a href="#4" onClick=four_()>_</a>

<details>
<summary>B</summary>
<div style="width: 300px">
```{python}
plot("log2(x / 220) * 7", [1, 2, 4, 8])
```
</div>
</details>
<details>

<summary>F</summary>
<div style="width: 300px">
```{python}
def Poe(intersect, steps, x):
    return log2(x/intersect) * steps

Poe(220, 7, 440)
```
</div>
</details>
:::


<!--
<details>
<summary>--</summary>
<div id="jjjobs">
<div class="cljs-editor-new"><pre>(do (defn add-blocks [s] (display-html (str "&lt;tiles&gt;" s "&lt;/tiles&gt;")) :tiles)

(add-blocks '(def (log2a intersect steps x) (return :tiles/slot))))
(add-blocks '(log2a 220 7 440))
(add-blocks '(log2a 1 1 2))</pre></div>
</div>
</details>

<script src="jsfiles/rigsomelight.com/assets/inline-edit/main.js"></script>

<script>
function mutationCallback(customFn, mutationsList, observer) {
      mutationsList.forEach((mutation) => {
        if (mutation.target.className == "cljs-html-display active" &&
            mutation.type == "childList") {
        customFn(mutation.target.childNodes[0].innerText);
        }
    });
}

const observer = new MutationObserver(mutationCallback.bind(null, addBlocks(ws5)));
const targetNode = document.getElementById("jjjobs");
const config = { attributes: true, childList: true, subtree: true };
observer.observe(targetNode, config);
</script>

-->

<!--
:::{.column-screen-left}
<details>
<summary>xx</summary>
<table>
<tr>
<td style="vertical-align: top">
<div id="blocklyDivLog21" style="height: 150px; width: 230px"></div>
<script>brender("(log2 x)", "blocklyDivLog21")</script>
</td>
<td>
<div id="divlog2x" class="jxgbox" style="height:300px; width: 800px"></div>
<script>
statejs.log23.log3("divlog2x");
</script>
<span onClick=statejs.log23.log3("divlog2x") style="color:blue">1</span>
<span onClick=statejs.log23.log3anim2() style="color:blue">2</span>
<span onClick=statejs.log23.log3anim3() style="color:blue">3</span>
</td>
</tr>
</table>
</details>
:::
-->

:::{.column-screen-left}
<details>
<summary onClick=cleandiv("blocklyDiv5_t") id="6">6</summary>
<table><tr>
<td style="vertical-align: top">
<div style="width: 230px"><img src="jsfiles/xkcd_partial.jpg" style="horizontal-align: right"></img></div>
</td>
<td style="vertical-align: top">
<div id="blocklyDiv14" style="height: 400px; width: 800px"></div>
<script>
var r14= () => brender("(plot (partial Poe 220 7) [1 2 4 8])", "blocklyDiv14")
var ws6 = r14();
</script>

<span onClick="addBlocks(ws6)('(log2b intersect steps)'); addBlocks(ws6)('(log2b intersect steps)'); addBlocks(ws6)('(def :tiles/slot (return :tiles/slot))') " style="color:blue">B</span>
<div class="desc" id="blocklyDiv14_t">
To really plot the procedure named Poe, I need to perform an operation named "partial". -A- You call a procedure named "partial" and give it "Poe" as the argument. -- Here is the main theme in spades: "partial" taking a procedure to deliver the target to plot. -B- I turned all this into yet another procedure and named it log2b that is very conveneint for plotting. -AC_-
</div>
</td>
</tr></table>

</details>
:::

::: {.hidden}
```{python}
def log2b(intersect, steps):
    return partial(Poe, intersect, steps)
```
:::

::: {.column-margin}
<a href="#6" onClick="var ws6t=brender('(def (log2b intersect steps) (return (partial Poe intersect steps)))', 'blocklyDiv14'); addBlocks(ws6t)('(plot (log2b 220 7) [1 2 4 8])');">_</a>
<details>
<summary>A</summary>
<div style="width: 305px">
```{python}
plot(partial(Poe, 220, 7), [1, 2, 4, 8])
```
</div>
</details>

<details>
<summary>C</summary>
<div style="width: 305px">
```{python}
plot(log2b(220, 7), [1, 2, 4, 8])
```
</div>
</details>
:::

<details>
<summary onClick=cleandiv('blocklyDiv14_t') id="9">7</summary>
<div id="blocklyDiv19" style="height: 300px;"></div>
<script>
r19 = () => brenderT("(call (log2b 1 1) x0)", "blocklyDiv19", true);
var ws19 = r19();
var abws19 = addBlocks(ws19);
</script>
<span onClick="" style="color:blue">A</span>
<span onClick="abws19('x1')" style="color:blue">C</span>
<span onClick="abws19('0.7')" style="color:blue">E</span>
<div class="desc" id="blocklyDiv19_t">
Not only can log2b be plotted. Log2b can also be called. -B- That log2b can be called with a symbol might be a surprise. That is thanks to a package named Sympy. Here you see that for the name of the symbol I chose x-naught. -C-BD- But x-naught is only the default of possible choices. I can also choose x1 as a symbol. This freedom of choice is because log2b does not know a thing about x (or y or z). -E-DF- Also none of the parameters need to be a whole number. O point 7 does nicely as well.
</div>
</details>

<script>
var fu19 = () => {
var ws19_E = brenderT("(call (log2b 1 0.7) x1)", "blocklyDiv19", true);
var abws19_E = addBlocks(ws19_E);
// abws19_E('(call (log2b 1 1) x1)')
// abws19_E('(call (log2b 1 0.7) x1)')
}
</script>

::: {.column-margin}
<a href="#9" onClick="fu19();">_</a>
<details>
<summary>B</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 1), x0)
```
</div>
</details>

<details>
<summary>D</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 1), x1)
```
</div>
</details>

<details>
<summary>F</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 0.7), x1)
```
</div>
</details>
:::

<details>
<summary onClick="cleandiv('blocklyDiv19_t')" id="11">8</summary>
<div id="divlogtri" class="jxgbox" style="height:300px;"></div>
<script>
statejs.strfrac1ovX = "$$\\frac{1}{x}$$";
statejs.log23.logtri("divlogtri");
</script>
<span onClick=statejs.log23.logtri("divlogtri") style="color:blue">A</span>
<span onClick="statejs.log23.trianim2()" style="color:blue">B</span>
<span onClick="statejs.log23.trianim3()" style="color:blue">C</span>
<span onClick="statejs.log23.trianim4()" style="color:blue">D</span>
<span onClick="statejs.log23.trianim5()" style="color:blue">E</span>
<span onClick="statejs.log23.trianim6()" style="color:blue">F</span>
<span onClick="statejs.log23.trianim7()" style="color:blue">G</span>
<div class="desc" id="divlogtri_t">
I would not bother you with my O point seven invention, hadn't I discovered it to be a segue to the natural logarithm. -B- In general, you can fit a series of triangles onto any curve. -C- Moving those triangles to the ground level reveals -D- that a new curve "one over x" fits their heights quite agreeably. -E- You can also try the other way around -F- That does not work quite as well. -G- The trick is to shrink the area while retaining the angles.
</div>
</details>

::: {.column-margin}
<a href="#11">_</a>
:::

<details>
<summary onClick="cleandiv('divlogtri_t');" id="12">9</summary>
<div id="blocklyDiv17a" style="height:150px"></div>
<script>var ws17a = brender("(call (log2b 1 0.7) x0)", "blocklyDiv17a")
var ab = addBlocks(ws17a);
</script>
<span onClick="ab('(D :tiles/slot)')" style="color:blue">D</span>
<div class="desc" id="blocklyDiv17a_t">
Triangles and curves like above bring to mind the concept of derivative.  -- Taking the derivative of log2b is simple and easy.
</div>
</details>

::: {.column-margin}
<a href="#12" onClick="brender('(call (D (log2b 1 0.7)) x0)', 'blocklyDiv17a');">_</a>
:::

<details>
<summary onClick=cleandiv('blocklyDiv17a_t'); id="13">10</summary>
```{python}
call(D(log2b(1, 0.7)), x0).evalf()
```

<div id="blocklyDiv22a" style="height:100px"></div>
<script>
var r13 = () => brender("(call (D ln) x0)", "blocklyDiv22a");
r13();
</script>
```{python}
call(D(ln), x0)
```
<div class="desc" id="blocklyDiv22a_t">
If I run Python to derive log2b and eval that at point O point seven, I almost get one over x as result. To become exact, I need to switch to "ln", the natural logarithm. Within this presentation, the pictures above can be called its pinnacle. As a kind of confirmation, I'd like to drop some names. The procedure named "call" would in math be recognised as a functional and D as an operator. In computer science, both is called functions of higher order. The natural logarithm "ln" of course is a function.
</div>
</details>

::: {.column-margin}
<a href="#blocklyDiv22a" onClick="r13();">_</a>
:::

<details>
<summary onClick="cleandiv('blocklyDiv22a_t');" id="14">--</summary>
$$\Large \left. \frac{d \ln(x)}{dx} \right|_{x=x_0}$$
<div class="desc" id="tex14_t">
I'd like to wind down with a note on notation. The common notation for deriving a function and then eval that at x-naught is by using the vertical bar which is also called "pipe".
</div>
</details>

::: {.column-margin}
<a href="#blocklyDiv22a">_</a>
:::

<details>
<summary onClick="cleandiv('tex14_t');" id="15">--</summary>
<div id="blocklyDivpipe" style="height:100px"></div>
<script>
var r15 = () => brender("((D ln) x0)", "blocklyDivpipe");
r15();
</script>

```{python}
(D(ln) | x0)
```
<div class="desc" id="blocklyDivpipe_t">
Just like in math, so in my picture I like to use pipe. It is not the D operator that is replaced by the pipe, but it is the call that is dropped.
</div>
</details>

::: {.column-margin}
<a href="#15" onClick="r15();">_</a>
:::

<details>
<summary onClick="cleandiv('blocklyDivpipe_t');" id="16">11</summary>
<div id="blocklyDivpipe2" style="height:100px"></div>
<script>
var r16 = () => brender("((log2b 220 7) 440)", "blocklyDivpipe2");
r16();
</script>

```{python}
(log2b(220, 7) | 440)
```
<div class="desc" id="blocklyDivpipe2_t">
As the pipe is a more succinct notation for the call functional, I prefer the pipe for simply calling log2b as well. -- You might think that such a custom pipe is hard to implement. This is not so. My custom pipe is just a few lines of Python.
</div>
</details>

::: {.column-margin}
<a href="#16" onClick="r16()">_</a>

<details>
<summary>A</summary>
<div style="width: 300px">
```{python}
#| eval: false
class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))
```
</div>
</details>
:::

<details>
<summary onClick=cleandiv("blocklyDivpipe2_t") id="12T">12</summary>
<div id="blocklyDivTrans" style="height: 500px;"></div>
<script>
wsTra = brenderT("(:tiles/vert ((plotting ln) [1 2 4 5]))", "blocklyDivTrans", true);
var abwsTra = addBlocks(wsTra);
</script>

<span style="color:blue">A</span>
<span onClick="abwsTra('-1')" style="color:blue">C</span>
<span onClick="abwsTra('(:tiles/vert ((filtering isPositive) :tiles/slot))')" style="color:blue">E</span>
<span onClick="abwsTra('(:tiles/vert (plotting (:tiles/vert (compose (mapping :tiles/slot) :tiles/slot)))) ')" style="color:blue">b</span>
<span onClick="abwsTra('(D :tiles/slot)')" style="color:blue">d</span>

<div class="desc" id="blocklyDivTrans_t">
Text
</div>
</details>

::: {.column-margin}
<a href="#12T">_</a>

<details>
<summary>B</summary>
<div style="width: 310px">
```{python}
(plotting(ln) |
 (1, 2, 4, 5))
```
</div>
</details>

<details>
<summary>D</summary>
<div style="width: 310px">
```{python}
ln(-1)
```
</div>
</details>

<details>
<summary>F</summary>
<div style="width: 310px">
```{python}
(filtering(isPositive) |
 (-1, 2, 4, 5))
```
</div>
</details>

<details>
<summary>a</summary>
<div style="width: 310px">
```{python}
(plotting(ln) |
 (filtering(isPositive) |
  (-1, 2, 4, 5)))
```
</div>
</details>

<details>
<summary>c</summary>
<div style="width: 310px">
```{python}
(plotting (compose (mapping(ln),
                    filtering(isPositive))) |
 (-1, 2, 4, 5))
```
</div>
</details>

<details>
<summary>e</summary>
<div style="width: 310px">
```{python}
(plotting (compose (mapping (D(ln)), 
                    filtering(isPositive))) |
 (-1, 2, 4, 5))
```
</div>
</details>
:::

<div style="height: 900px;"></div>

<script>
document.querySelectorAll("details")
.forEach(d => d.setAttribute("open", ""))
</script>