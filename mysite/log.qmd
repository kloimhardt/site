---
title: "Drawing on the Logarithmic Scale"
format:
  html:
    code-fold: false
    code-summary: "N.A."
    echo: true
    self-contained: false
jupyter: python3
execute:
  cache: false
---
<script type="text/javascript" charset="UTF-8"
 src="jsfiles/jsxgraph/distrib/jsxgraphcore.js"></script>
<link rel="stylesheet" type="text/css" href="jsfiles/jsxgraph/distrib/jsxgraph.css" />

<script>var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;</script>
<script src="jsfiles/scittle/dist/scittle.js" type="application/javascript"></script>
<script src="jsfiles/scittle/dist/scittle.nrepl.js" type="application/javascript"></script>
<script src="jsfiles/blockly/blockly_compressed.js"></script>
<script src="jsfiles/blockly/msg/en.js"></script>
<script src="jsfiles/twotiles/twotiles_core.js"></script>

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/css/syntax.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/bootstrap/css/bootstrap.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/rigsomelight.com/assets/inline-edit/css/style.css">

<link rel="stylesheet" type="text/css" href="jsfiles/log.css">


<script>
var parse = scittle.core.eval_string(twotiles.parse_clj);
Blockly.defineBlocksWithJsonArray(twotiles.blocks);
</script>

<script>
var cleandiv = (divid) => {
const el = document.getElementById(divid);
while (el.firstChild) el.removeChild(el.firstChild);
}
var brender = (code,divid) => {
cleandiv(divid);
let ws = Blockly.inject(divid,
{"sounds": false,
"scrollbars": false,
"trashcan": false});

Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)), ws);

return ws;
}

</script>

<script>var statejs = {};</script>

<script>
const delay = ms => new Promise(res => setTimeout(res, ms));
</script>

::: {.hidden}
```{python}
#|code-fold: true
#|code-summary: "Code Preamble"

import sympy
from sympy import symbols, diff, ln
from sympy.codegen.cfunctions import log2
import functools
import matplotlib.pyplot as plt

x0=symbols("x0")
x1=symbols("x1")

def call(f, x):
    return f(x)

def mapv(a, b):
    return list(map(a, map(lambda x: 1.0 * x, b)))

class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))

def D(f):
  var = symbols("var")
  return PipeAsCall(sympy.lambdify([var], diff(f(var), var), "sympy"))

def rnd(expr):
     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})

def plot(f, x):
    plt.plot(x, mapv(f, x), "o")
```
:::

::: {.hidden}
```{python}
#| output: asis

import numpy as np
import json
import inspect

# https://muted.io/note-frequencies/
data = np.genfromtxt('notes.txt', delimiter='\t', dtype=str)
row_names = data[:, 0].tolist()
numerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()
               
print("<script>")
print("statejs['notenames']= ")
print(json.dumps(row_names))
print("statejs['frequencies']= ")

nofreq = [item
    for subl in
      [list(map(lambda n,f: [n, idx, f], row_names, fs))
        for idx, fs in enumerate(numerical_data)]
   for item in subl]


print(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith("s")]))
print("</script>")

# instead of using the plain js
# print("<script src='jsfiles/notes.js'></script>")
# we load the respective Scittle code

print("<script>")
with open('notes.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
> The Pythagoreans have shown that the pitch of a tone depends on the length of a cord. This was the first successful reduction of quality to quantity and therefore the beginning of science.  
> - Arthur Koestler, the Sleepwalkers
-->

<details>
<summary id="1">1</summary>
<div id="divnotes2" class="jxgbox" style="height:300px;"></div>
<script>statejs.notes.main("divnotes2");</script>

<span onClick=statejs.notes.main('divnotes2') style="color:blue">A</span>
<span onClick="statejs.notes.anim1()" style="color:blue">B</span>
<span onClick="statejs.notes.anim2()" style="color:blue">C</span>
<span onClick="statejs.notes.anim3()" style="color:blue">D</span>
<span onClick="statejs.notes.anim5()" style="color:blue">E</span>
<span onClick="statejs.notes.anim6()" style="color:blue">F</span>

<div class="desc" id="divnotes2_t">
word
</div>
</details>

::: {.column-margin}
<a href="#1" onClick="statejs.notes.anim6(); cleandiv('divnotes2_t')">_</a>
:::

<details>
<summary id="2">2</summary>
<div id="blocklyDivLog2" style="height: 300px;"></div>
<script>
function v2() {
brender("(:tiles/infix (* (log2 (:tiles/infix (/ x 220))) 7))", "blocklyDivLog2");
cleandiv("blocklyDivLog2_t")
}
v2();
</script>
<div class="desc" id="blocklyDivLog2_t">
word
</div>
</details>

::: {.column-margin}
<a href="#2" onClick=v2()>_</a>
:::

::: {.hidden}
```{python}
#| output: asis
print("<script>")
with open('log23.cljs', 'r') as file:
    data = file.read().replace('\n', '')
print("scittle.core.eval_string('", data, "')")
print("</script>")
```
:::

<!--
::: {.column-margin}
<details>
<summary>--</summary>
<div id="divlog23" class="jxgbox" style="height:150px; width: 350px"></div>
<script>
statejs.log23.main("divlog23");
statejs.log23.anim2();
</script>
</details>
:::
-->

<details>
<summary id="3">3</summary>
<div id="divmanylogs" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.many("divmanylogs");

const mywait = async () => {
  statejs.log23.manyanim2(110, 7);
  await delay(500);
  statejs.log23.manyanim2(440, 7);
  await delay(500);
  statejs.log23.manyanim2(880, 7);
};

var clean3 = () => {mywait(); cleandiv("divmanylogs_t")}
</script>

<span onClick=statejs.log23.many("divmanylogs") style="color:blue">A</span>
<span onClick=mywait() style="color:blue">B</span>
<div class="desc" id="divmanylogs_t">
A The choice of 220 for intersecting the x axis was arbitrary. The musical scale will always fit onto the curve as long as the number of steps is seven. B As a demonstration, I draw some other possible choices for the intersection. For the green curves, I needed a more general formula.
</div>

</details>
::: {.column-margin}
<a href="#3" onClick=clean3()>_</a>
:::

<details>
<summary id="4">4</summary>
<div id="blocklyDiv5" style="height: 350px;"></div>
<script>
var ws5 = brender(" (:tiles/infix (* (log2 (:tiles/infix (/ x intersect))) steps))", "blocklyDiv5");

var addBlocks = (ws) => (s) =>
Blockly.Xml.appendDomToWorkspace(Blockly.utils.xml.textToDom(parse(s)), ws);
var abws5 = addBlocks(ws5);
</script>

<span onClick="" style="color:blue">A</span>
<span onClick="abws5('(def (log2a intersect steps x) (return :tiles/slot))')" style="color:blue">B</span>
<span onClick="abws5('(log2a 220 7 440)')" style="color:blue">D</span>
<span onClick="abws5('(log2a 1 1 2)')" style="color:blue">F</span>
<div class="desc" id="blocklyDiv5_t">
A The formula used to draw the green graphs does not contain numbers anymore. Instead, the new formula contains two parameters. The first parameter is called intersect. The second parameter is called steps. B - I needed to wrap this formula into a function. I called this new function log2a. You simply put the formula into its return statement. - C The syntax to define the function is Python syntax. D I calculate the result for the frequency 440. E As expected, you get the number 7. F I now chose to set both intersection and steps to unity. G I calculate the result for the value 2. The result is the number 1.
</div>
</details>
<script>
var four_ = () => {
var ws4u = brender(" (def (log2a intersect steps x) (return (:tiles/infix (* (log2 (:tiles/infix (/ x intersect))) steps))))", "blocklyDiv5");
var abws4u = addBlocks(ws4u);
abws4u('(log2a 220 7 440)')
abws4u('(log2a 1 1 2)')
cleandiv("blocklyDiv5_t")
}
</script>

::: {.column-margin}
<a href="#4" onClick=four_()>_</a>
<details>
<summary>C</summary>
<div style="width: 300px">
```{python}
def log2a(intersect, steps, x):
    return log2(x/intersect) * steps
```
</div>
</details>
:::


<!--
<details>
<summary>--</summary>
<div id="jjjobs">
<div class="cljs-editor-new"><pre>(do (defn add-blocks [s] (display-html (str "&lt;tiles&gt;" s "&lt;/tiles&gt;")) :tiles)

(add-blocks '(def (log2a intersect steps x) (return :tiles/slot))))
(add-blocks '(log2a 220 7 440))
(add-blocks '(log2a 1 1 2))</pre></div>
</div>
</details>

<script src="jsfiles/rigsomelight.com/assets/inline-edit/main.js"></script>

<script>
function mutationCallback(customFn, mutationsList, observer) {
      mutationsList.forEach((mutation) => {
        if (mutation.target.className == "cljs-html-display active" &&
            mutation.type == "childList") {
        customFn(mutation.target.childNodes[0].innerText);
        }
    });
}

const observer = new MutationObserver(mutationCallback.bind(null, addBlocks(ws5)));
const targetNode = document.getElementById("jjjobs");
const config = { attributes: true, childList: true, subtree: true };
observer.observe(targetNode, config);
</script>

-->

::: {.column-margin}
<div>
<details>
<summary>E</summary>
<div style="width: 300px">
```{python}
log2a(220, 7, 440)
```
</div>
</details>

<details>
<summary>G</summary>

<div style="width: 300px">
```{python}
log2a(1, 1, 2)
```
</div>
</details>
</div>
:::

<!--
:::{.column-screen-left}
<details>
<summary>xx</summary>
<table>
<tr>
<td style="vertical-align: top">
<div id="blocklyDivLog21" style="height: 150px; width: 230px"></div>
<script>brender("(log2 x)", "blocklyDivLog21")</script>
</td>
<td>
<div id="divlog2x" class="jxgbox" style="height:300px; width: 800px"></div>
<script>
statejs.log23.log3("divlog2x");
</script>
<span onClick=statejs.log23.log3("divlog2x") style="color:blue">1</span>
<span onClick=statejs.log23.log3anim2() style="color:blue">2</span>
<span onClick=statejs.log23.log3anim3() style="color:blue">3</span>
</td>
</tr>
</table>
</details>
:::
-->

<details>
<summary id="5">5</summary>
<div id="blocklyDiv10" style="height: 150px; width: 800px"></div>
<script>brender("(plot log2 [1 2 4 8])", "blocklyDiv10")</script>
<div class="desc" id="blocklyDiv10_t">
Word
</div>
```{python}
plot(log2, [1, 2, 4, 8])
```
<script>
var clean5 = () => { brender("(plot log2 [1 2 4 8])", "blocklyDiv10"); cleandiv("blocklyDiv10_t");}
</script>

</details>
::: {.column-margin}
<a href="#5" onClick=clean5()>_</a>
:::

:::{.column-screen-left}
<details>
<summary id="6">6</summary>
<table><tr>
<td style="vertical-align: top">
<div style="width: 230px"><img src="jsfiles/xkcd_partial.jpg" style="horizontal-align: right"></img></div>
</td>
<td style="vertical-align: top">
<div id="blocklyDiv14" style="height: 300px; width: 800px"></div>
<script>
var r14= () => brender("(plot (partial log2a 1 1) [1 2 4 8])", "blocklyDiv14")
r14();
</script>
<div class="desc" id="blocklyDiv14_t">
word
</div>
</td>
</tr></table>

</details>
:::

::: {.column-margin}
<a href="#6" onClick="r14(); cleandiv('blocklyDiv14_t')">_</a>
<details>
<summary>A</summary>
<div style="width: 300px">
```{python}
plot(partial(log2a, 1, 1), [1, 2, 4, 8])
```
</div>
</details>
:::

<details>
<summary id="7">7</summary>
<div id="blocklyDiv16" style="height: 300px;"></div>
<script>
var r16= () => brender("(def (log2b intersect steps) (return (partial (log2a intersect steps))))", "blocklyDiv16")
r16();
</script>

<div class="desc" id="blocklyDiv16_t">
word
</div>
</details>

::: {.column-margin}
<a href="#7" onClick="r16(); cleandiv('blocklyDiv16_t')">_</a>
:::

::: {.hidden}
```{python}
def log2b(intersect, steps):
    return partial(log2a, intersect, steps)
```
:::

<details>
<summary id="8">8</summary>
<div id="blocklyDiv16c" style="height:300px"></div>
<script>
var r16c= () =>brender("(plot (log2b 1 1) [1 2 4 8])", "blocklyDiv16c")
r16c();
</script>
<div class="desc" id="blocklyDiv16c_t">
word
</div>
</details>

::: {.column-margin}
<a href="#8" onClick="r16c(); cleandiv('blocklyDiv16c_t')">_</a>
<details>
<summary>A</summary>
<div style="width: 300px">
```{python}
plot(log2b(1, 1), [1, 2, 4, 8])
```
</div>
</details>
:::

<details>
<summary id="9">9</summary>
<div id="blocklyDiv19" style="height: 500px;"></div>
<script>
r19 = () => brender(" (call (log2b 1 1) 2)", "blocklyDiv19");
var ws19 = r19();
var abws19 = addBlocks(ws19);
</script>

<span onClick="" style="color:blue">A</span>
<span onClick="abws19('(call (log2b 1 1) x0)')" style="color:blue">B</span>
<span onClick="abws19('(call (log2b 1 1) x1)')" style="color:blue">C</span>
<span onClick="abws19('(call (log2b 1 0.7) x1)')" style="color:blue">D</span>

<div class="desc" id="blocklyDiv19_t">
word
</div>
</details>

<script>
var fu19 = () => {
var ws19_E = r19();
var abws19_E = addBlocks(ws19_E);
abws19_E('(call (log2b 1 1) x0)')
abws19_E('(call (log2b 1 1) x1)')
abws19_E('(call (log2b 1 0.7) x1)')
}
</script>

::: {.column-margin}
<a href="#9" onClick="fu19(); cleandiv('blocklyDiv19_t');">_</a>
<details>
<summary>A</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 1), 2)
```
</div>
</details>

<details>
<summary>B</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 1), x0)
```
</div>
</details>

<details>
<summary>C</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 1), x1)
```
</div>
</details>

<details>
<summary>D</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 0.7), x1)
```
</div>
</details>
:::

<details>
<summary id="10">10</summary>
<div id="divlog20_2" class="jxgbox" style="height:300px"></div>
<script>
statejs.log23.log2b("divlog20_2");
</script>
<span onClick=statejs.log23.log2b("divlog20_2") style="color:blue">C</span>
<span onClick=statejs.log23.log2banim2() style="color:blue">D</span>
<div class="desc" id="divlog20_2_t">
word
</div>
</details>

::: {.column-margin}
<a href="#10" onClick="cleandiv('divlog20_2_t');">_</a>
:::

<details>
<summary id="11">11</summary>
<div id="divlogtri" class="jxgbox" style="height:300px;"></div>
<script>
statejs.strfrac1ovX = "$$\\frac{1}{x}$$";
statejs.log23.logtri("divlogtri");
</script>
<span onClick=statejs.log23.logtri("divlogtri") style="color:blue">A</span>
<span onClick="statejs.log23.trianim2()" style="color:blue">B</span>
<span onClick="statejs.log23.trianim3()" style="color:blue">C</span>
<span onClick="statejs.log23.trianim4()" style="color:blue">D</span>
<span onClick="statejs.log23.trianim5()" style="color:blue">E</span>
<span onClick="statejs.log23.trianim6()" style="color:blue">F</span>
<span onClick="statejs.log23.trianim7()" style="color:blue">G</span>
<div class="desc" id="divlogtri_t">
word
</div>
</details>

::: {.column-margin}
<a href="#11" onClick="cleandiv('divlogtri_t');">_</a>
:::

<details>
<summary id="12">12</summary>
<div id="blocklyDiv17a" style="height:300px"></div>
<script>var ws17a = brender("(call (log2b 1 0.7) x0)", "blocklyDiv17a")
var ab = addBlocks(ws17a);
</script>
<span onClick="ab('(D :tiles/slot)')" style="color:blue">D</span>
<div class="desc" id="blocklyDiv17a_t">
word
</div>
</details>

::: {.column-margin}
<a href="#12" onClick="brender('(call (D (log2b 1 0.7)) x0)', 'blocklyDiv17a'); cleandiv('blocklyDiv17a_t');">_</a>
<details>
<summary>A</summary>
<div style="width: 300px">
```{python}
call(log2b(1, 0.7), x0)
```
</div>
</details>
:::

<details>
<summary id="13">13</summary>
```{python}
call(D(log2b(1, 0.7)), x0).evalf()
```

<div id="blocklyDiv22a" style="height:100px"></div>
<script>
var r13 = () => brender("(call (D ln) x0)", "blocklyDiv22a");
r13();
</script>
```{python}
call(D(ln), x0)
```
<div class="desc" id="blocklyDiv22a_t">
word
</div>
</details>

::: {.column-margin}
<a href="#13" onClick="r13(); cleandiv('blocklyDiv22a_t');">_</a>
:::

<details>
<summary id="14">14</summary>
$$\Large \left. \frac{d \ln(x)}{dx} \right|_{x=x_0}$$
<div class="desc" id="tex14_t">
word
</div>
</details>

::: {.column-margin}
<a href="#14" onClick="cleandiv('tex14_t');">_</a>
:::


<details>
<summary id="15">15</summary>
<div id="blocklyDivpipe" style="height:100px"></div>
<script>
var r15 = () => brender("((D ln) x0)", "blocklyDivpipe");
r15();
</script>

```{python}
(D(ln) | x0)
```
<div class="desc" id="blocklyDivpipe_t">
word
</div>
</details>

::: {.column-margin}
<a href="#15" onClick="r15(); cleandiv('blocklyDivpipe_t');">_</a>
:::

<details>
<summary id="16">16</summary>
<div id="blocklyDivpipe2" style="height:100px"></div>
<script>
var r16 = () => brender("((log2b 220 7) 440)", "blocklyDivpipe2");
r16();
</script>

```{python}
(log2b(220, 7) | 440)
```
<div class="desc" id="blocklyDivpipe2_t">
word
</div>
</details>

::: {.column-margin}
<a href="#16" onClick="r16(); cleandiv('blocklyDivpipe2_t');">_</a>
<details>

<summary>17</summary>
<div style="width: 300px">
```{python}
#| eval: false
class PipeAsCall(object):
    def __init__(self, func):
        self.func = func
    def __or__(self, other):
        return self.func(other)
    def __call__(self, x):
        return self.func(x)

def partial(*args):
    return PipeAsCall(
        functools.partial(*args))
```
</div>
</details>
:::

<script>
document.querySelectorAll("details")
.forEach(d => d.setAttribute("open", ""))
</script>