[
  {
    "objectID": "log.html",
    "href": "log.html",
    "title": "Drawing on the Logarithmic Scale",
    "section": "",
    "text": "Code Preamble\nimport sympy\nfrom sympy import symbols, diff, ln\nfrom sympy.codegen.cfunctions import log2\nimport functools\nimport matplotlib.pyplot as plt\n\nx0=symbols(\"x0\")\nx1=symbols(\"x1\")\n\ndef call(f, x):\n    return f(x)\n\ndef mapv(a, b):\n    return list(map(a, map(lambda x: 1.0 * x, b)))\n\nclass PipeAsCall(object):\n    def __init__(self, func):\n        self.func = func\n    def __or__(self, other):\n        return self.func(other)\n    def __call__(self, x):\n        return self.func(x)\n\ndef partial(*args):\n    return PipeAsCall(\n        functools.partial(*args))\n\ndef D(f):\n  var = symbols(\"var\")\n  return PipeAsCall(sympy.lambdify([var], diff(f(var), var), \"sympy\"))\n\ndef rnd(expr):\n     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})\n\ndef plot(f, x):\n    plt.plot(x, mapv(f, x), \"o\")\n\n\n\n\nimport numpy as np\nimport json\nimport inspect\n\n# https://muted.io/note-frequencies/\ndata = np.genfromtxt('notes.txt', delimiter='\\t', dtype=str)\nrow_names = data[:, 0].tolist()\nnumerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()\n               \nprint(\"&lt;script&gt;\")\nprint(\"statejs['notenames']= \")\nprint(json.dumps(row_names))\nprint(\"statejs['frequencies']= \")\n\nnofreq = [item\n    for subl in\n      [list(map(lambda n,f: [n, idx, f], row_names, fs))\n        for idx, fs in enumerate(numerical_data)]\n   for item in subl]\n\n\nprint(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith(\"s\")]))\nprint(\"&lt;/script&gt;\")\n\n# instead of using the plain js\n# print(\"&lt;script src='jsfiles/notes.js'&gt;&lt;/script&gt;\")\n# we load the respective Scittle code\n\nprint(\"&lt;script&gt;\")\nwith open('notes.cljs', 'r') as file:\n    data = file.read().replace('\\n', '')\nprint(\"scittle.core.eval_string('\", data, \"')\")\nprint(\"&lt;/script&gt;\")\n\n\n\n\n\n\n1\n\n\n\n\n\nA B C D E F\n\nSometimes, you need to start with the basics. I am sure you all have your own ways to do graphs. So you don’t really need this, but I think my way has its own value. In a minute, I will show the main point for you to decide. But in the first step, I needed to make a choice for the mathematical target to plot. It could have been anyone. I chose the musical scale. – The notes are logarithmic.\n\n\n\n\n_\n\n\n\n2\n\n\n\n\n\n\nTo make it fit the notes, you need to insert some scale factors into the logarithmic formula. – But I have jumped ahead. I need to plot the plain log2 first.\n\n\n\n\n_\n\nprint(\"&lt;script&gt;\")\nwith open('log23.cljs', 'r') as file:\n    data = file.read().replace('\\n', '')\nprint(\"scittle.core.eval_string('\", data, \"')\")\nprint(\"&lt;/script&gt;\")\n\n\n\n\n\n3\n\n\n\n\n\n\nAnd here, I hit the main message of my presentation. It is this. – It is the log2 that you plot. This is so obvious that I repeat: It is the log2 that you plot. The log2 is a perfectly good mathematical object. It is not the log2 of x or y or z. It is just log2. You plot just log2. That, in a nutshell, is my approach for plotting.\n\n\nplot(log2, [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n4\n\n\n\n\n\nA B\n\nWhile I do worry that I have not given my viewers enough time to digest this, I move on towards the practical goal. – I need to get more to something like this.\n\n\n\n\n_\n\n\n5\n\n\n\n\n\nA B\n\nTo plot the notes, I come back to the formula I showed at the beginning. I arrived at this formula by trial and error. This formula is the result of my plots and mistakes, the digested essence. You cannot plot this formula directly, at least when using my approach. This is the main theme again. I need a proper mathematical target to plot. -B- To get such a target, I need to wrap this formula into a procedure. – The procedure itself I gave the name Poe. It takes the arguments intersect, steps and the frequency x. – The procedure returns the formula. – You have to replace the numbers by the chosen names. -C- I provide the procedure as Python code.\n\n\n\n\n\n\n\n_\n\n\nC\n\n\n\ndef Poe(intersect, steps, x):\n    return log2(x/intersect) * steps\n\nPoe(220, 7, 440)\n\n\\(\\displaystyle 7.0\\)\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\nThe procedure named Poe is not yet the mathematical target. The procedure Poe which does the calculation according to the original formula shares the same fate as this formula: also Poe cannot be plotted directly. To make the desired mathematical target out of Poe, I need to use a standard maneuver of computer science. You take the partial of Poe. – Here is my main theme in spades: “partial” taking a procedure to deliver the target to plot. Only now can you plot the scaled log2. – All this can in turn be wrapped in a procedure. – If all this is too much, maybe it helps that this notebook is online if you like to try yourself.\n\n\n\n\n\n\n\n\ndef log2b(intersect, steps):\n    return partial(Poe, intersect, steps)\n\n\n\n\n_\n\n\nA\n\n\n\nplot(partial(Poe, 220, 7), [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\n\n\n\nB\n\n\n\nplot(log2b(220, 7), [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\nA x1 0.7\n\n\n\n\n\nNot only can log2b be plotted. Log2b can also be called. What might be surprising is that log2b can be called with a symbol. – I chose x0 as the symbol in this example. – But it is arbitrary. It could also have been x1. Remember that log2 does not know anything about x or y or z. – Also, the step argument does not need to be an integer, it can well be 0 point 7.\n\n\n\n\n\n_\n\n\nB\n\n\n\ncall(log2b(1, 1), x0)\n\n\\(\\displaystyle \\operatorname{log}_{2}{\\left(x_{0} \\right)}\\)\n\n\n\n\n\n\nC\n\n\n\ncall(log2b(1, 1), x1)\n\n\\(\\displaystyle \\operatorname{log}_{2}{\\left(x_{1} \\right)}\\)\n\n\n\n\n\n\nD\n\n\n\ncall(log2b(1, 0.7), x1)\n\n\\(\\displaystyle 0.7 \\operatorname{log}_{2}{\\left(x_{1} \\right)}\\)\n\n\n\n\n\n\n8\n\n\n\n\n\nA B C D E F G\n\nIn fact, the case 0.7 is almost a special one. – As any curve, it can be approximated by triangles. – I move the triangles to the ground level. – Now the curve known as “one over x” fits their hights quite nicely. – You can also try the other way around – That does not work quite as well. – The trick is to shrink the area of the triangle while retaining its shape.\n\n\n\n\n_\n\n\n9\n\n\n\n\n\nD\n\nThis triangle business smells of derivatives. – Taking the derivate is simple and easy.\n\n\n\n\n_\n\n\n10\n\n\ncall(D(log2b(1, 0.7)), x0).evalf()\n\n\\(\\displaystyle \\frac{1.00988652862227}{x_{0}}\\)\n\n\n\n\n\n\n\ncall(D(ln), x0)\n\n\\(\\displaystyle \\frac{1}{x_{0}}\\)\n\n\n\nIf I do the actual calculation with 0.7, I nearly get one over x for the derivative. To get the exact result, I need to switch to the natural logarithm ln.\n\n\n\n\n_\n\n\n–\n\n\\[\\Large \\left. \\frac{d \\ln(x)}{dx} \\right|_{x=x_0}\\]\n\nThe usual mathematical notation for the derivative at point x0 is by unsing the vertical bar, colloquially called pipe.\n\n\n\n\n_\n\n\n–\n\n\n\n\n\n\n(D(ln) | x0)\n\n\\(\\displaystyle \\frac{1}{x_{0}}\\)\n\n\n\nIn my pictorial representation, I’d like to do the same. Note that it is not the D procedure that is representd by the pipe symbol. It is the call procedure that is dropped and replaced by the pipe.\n\n\n\n\n_\n\n\n11\n\n\n\n\n\n\n(log2b(220, 7) | 440)\n\n\\(\\displaystyle 7.0\\)\n\n\n\nAll this means that also a direct call to log2b can be done with a pipe. – You might think that such a custom pipe is a lot of work. This is not so. My custom pipe is just a few lines of Python.\n\n\n\n\n_\n\n\nA\n\n\n\nclass PipeAsCall(object):\n    def __init__(self, func):\n        self.func = func\n    def __or__(self, other):\n        return self.func(other)\n    def __call__(self, x):\n        return self.func(x)\n\ndef partial(*args):\n    return PipeAsCall(\n        functools.partial(*args))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notebooks",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "lise.html",
    "href": "lise.html",
    "title": "Lise",
    "section": "",
    "text": "hallo ich auch"
  },
  {
    "objectID": "lise.html#dialog-lise-albert",
    "href": "lise.html#dialog-lise-albert",
    "title": "Lise",
    "section": "",
    "text": "hallo ich auch"
  },
  {
    "objectID": "twotiles.html",
    "href": "twotiles.html",
    "title": "Twotiles Code Visualization",
    "section": "",
    "text": "Twotiles is a free and open JavaScript libaray for turning code into visual blocks. The library can be used in any website."
  },
  {
    "objectID": "twotiles.html#example",
    "href": "twotiles.html#example",
    "title": "Twotiles Code Visualization",
    "section": "Example",
    "text": "Example\nThe following uses a simple math example, taking the derivative of a logarithm, to show how code is visualized with the Twotiles library.\n\nSymbolic computation in Python: SymPy\n\n\nCode Preamble\nfrom sympy import symbols,diff,log\nfrom functools import partial\nx=symbols(\"x\")\nb=symbols(\"b\")\ny=symbols(\"y\")\n\ndef call(f, x):\n    return f(x)\n\n\nUsing SymPy, one can calculate with symbols. Here, x is a symbol.\n\n\n\n\n\n\n\n5/x - (50 + 14)\n\n\n\\(\\displaystyle -64 + \\frac{5}{x}\\)\n\n\n\n\n\n\n\n\n\nlog(64.0)\n\n\n\\(\\displaystyle 4.15888308335967\\)\n\n\nOne can also make an explicit call to the log function.\n\n\n\n\n\n\n\ncall(log, 64.0)\n\n\n\\(\\displaystyle 4.15888308335967\\)\n\n\nThis makes call a special kind of function. Because it takes a function as its first argument, call is a function of “higher order”. But for now we return to the usual way of making a calculation.\n\n\n\n\n\n\n\nlog(x * 5)\n\n\n\\(\\displaystyle \\log{\\left(5 x \\right)}\\)\n\n\n\n\n\n\n\n\n\ndiff(log(x) * 5, x)\n\n\n\\(\\displaystyle \\frac{5}{x}\\)\n\n\n\n\n\n\n\n\n\ndiff(log(x),x)\n\n\n\\(\\displaystyle \\frac{1}{x}\\)\n\n\n\n\n\n\n\n\n\ndef logarithm(b, x):\n    return log(x) / log(b)\n\n\n\n\n\n\n\n\n\nlogarithm(8.0, 64.0)\n\n\n\\(\\displaystyle 2.0\\)\n\n\n\n\n\n\n\n\n\ndef log_base(b):\n    return partial(logarithm, b)\n\n\n\n\n\n\n\n\n\ncall(log_base(8.0),64.0)\n\n\n\\(\\displaystyle 2.0\\)\n\n\n\n\n\n\n\n\n\ndiff(call(log_base(8.0),x),x)\n\n\n\\(\\displaystyle \\frac{0.480898346962988}{x}\\)\n\n\n\n\nSymbolic computation in JavaScript: EmmyJS\n\n\n\n\n\n\n\n\n\n\n\nto_infix(\n  call(diff(log_base(8.0)), x)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nto_infix(\n  call(diff(log), x)\n)\n\n\n\n\n\n\n\n\n\nSymPy Recap"
  },
  {
    "objectID": "twotiles.html#guide",
    "href": "twotiles.html#guide",
    "title": "Twotiles Code Visualization",
    "section": "Guide",
    "text": "Guide\n\nUsing Twotiles in a Website\nTo display graphical blocks, include into your web-site the Scittle, Blockly and indeed the Twotiles library:\n&lt;script src=\"https://cdn.jsdelivr.net/npm/scittle@0.6.22/dist/scittle.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/blockly/blockly.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/blockly/msg/en.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://kloimhardt.github.io/twotiles/twotiles_core.js\"&gt;&lt;/script&gt;\nThen initialize the Twotiles parser …\n&lt;script&gt;\nvar parse = scittle.core.eval_string(twotiles.parse_clj);\n&lt;/script&gt;\n… and Blockly:\n&lt;script&gt;\nBlockly.defineBlocksWithJsonArray(twotiles.blocks);\n&lt;/script&gt;\nIt is convenient to have a render function:\n&lt;script&gt;\nvar brender = (code,divid) =&gt;\nBlockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)),\nBlockly.inject(divid,\n{\"toolbox\": twotiles.toolbox,\n\"sounds\": false,\n\"scrollbars\": false,\n\"trashcan\": false}));\n&lt;/script&gt;\nThen graphics can be displayed with\n&lt;div id=\"blocklyDiv\" style=\"height: 100px;\"&gt;&lt;/div&gt;\n&lt;script&gt;brender(\"(log 64)\", \"blocklyDiv\")&lt;/script&gt;\nwhich looks like this:\n\n\n\n\n\n\nUsing EmmyJS\nA detailed example of EmmyJS can be found at sicmutils-as-js-book-part1.html\n\n\nQuarto Notebook of this Page\nThis page was generated with Quarto out of the file twotiles.qmd"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]