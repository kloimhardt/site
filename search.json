[
  {
    "objectID": "log.html",
    "href": "log.html",
    "title": "Drawing on the Logarithmic Scale",
    "section": "",
    "text": "Code Preamble\nimport sympy\nfrom sympy import symbols, diff, ln\nfrom sympy.codegen.cfunctions import log2\nimport functools\nimport matplotlib.pyplot as plt\n\nx0=symbols(\"x0\")\nx1=symbols(\"x1\")\n\ndef call(f, x):\n    return f(x)\n\ndef mapv(a, b):\n    return list(map(a, map(lambda x: 1.0 * x, b)))\n\ndef mapv_indexed(f, coll):\n    return list(map(lambda x: [x, f(x)], map(lambda x: 1.0 * x, coll)))\n\nclass PipeAsCall(object):\n    def __init__(self, func):\n        self.func = func\n    def __or__(self, other):\n        return self.func(other)\n    def __call__(self, x):\n        return self.func(x)\n\nclass Transducer(PipeAsCall):\n  pass\n\ndef partial(*args):\n    return PipeAsCall(\n        functools.partial(*args))\n\ndef D(f):\n  var = symbols(\"var\")\n  return PipeAsCall(sympy.lambdify([var], diff(f(var), var), \"sympy\"))\n\ndef rnd(expr):\n     return expr.xreplace({n: round(n, 3) for n in expr.atoms(sympy.Number)})\n\ndef plot(f, x):\n    if (type(f)==str) or (type(f)==sympy.core.numbers.Float):\n       return \"That's not something you can plot\"\n    else:\n       plt.plot(x, mapv(f, x), \"o\")\n\ndef plotting(f):\n    if type(f) == Transducer:\n        return partial(lambda f, coll: plt.plot(list(map(lambda x: x[0],f(coll))),list(map(lambda x: x[1],f(coll))), \"o\"), f)\n    else:\n        return partial(lambda f, x: plt.plot(x, mapv(f, x), \"o\"), f)\n\nisPositive = lambda n: True if n&gt;0 else False\n\ndef smaller(x):\n    return lambda n: True if n&lt;x else False\n\ndef filtering(f):\n    return Transducer(functools.partial(lambda f,coll: list(filter(f, coll)), f))\n\ndef mapping(f):\n    return Transducer(functools.partial(mapv_indexed, f))\n\ndef compose(f, g):\n    return Transducer(lambda x: f(g(x)))\n\n\n\n\n\nfrequencies = [16.35, 17.32, 18.35, 19.45, 20.6, 21.83, 23.12, 24.5, 25.96, 27.5, 29.14, 30.87, 32.7, 34.65, 36.71, 38.89, 41.2, 43.65, 46.25, 49.0, 51.91, 55.0, 58.27, 61.74, 65.41, 69.3, 73.42, 77.78, 82.41, 87.31, 92.5, 98.0, 103.83, 110.0, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185.0, 196.0, 207.65, 220.0, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.0, 415.3, 440.0, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.0, 932.33, 987.77, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760.0, 1864.66, 1975.53, 2093.0, 2217.46, 2349.32, 2489.0, 2637.0, 2793.83, 2959.96, 3135.96, 3322.44, 3520.0, 3729.31, 3951.0, 4186.0, 4434.92, 4698.63, 4978.0, 5274.0, 5587.65, 5919.91, 6271.93, 6644.88, 7040.0, 7458.62, 7902.13]\n\n\n\n\nimport numpy as np\nimport json\nimport inspect\n\n# https://muted.io/note-frequencies/\ndata = np.genfromtxt('notes.txt', delimiter='\\t', dtype=str)\nrow_names = data[:, 0].tolist()\nnumerical_data = np.matrix.transpose(data[:, 1:]).astype(float).tolist()\n\nnofreq = [item\n    for subl in\n      [list(map(lambda n,f: [n, idx, f], row_names, fs))\n        for idx, fs in enumerate(numerical_data)]\n   for item in subl]\n\nfrequencies = [n[2] for n in nofreq]\n\n\n\nprint(\"&lt;script&gt;\")\nprint(\"statejs['notenames']= \")\nprint(json.dumps(row_names))\nprint(\"statejs['frequencies']= \")\n\nprint(json.dumps([[nf[0] + str(nf[1]), nf[2]] for nf in nofreq if not nf[0].endswith(\"s\")]))\nprint(\"&lt;/script&gt;\")\n\n# instead of using the plain js\n# print(\"&lt;script src='jsfiles/notes.js'&gt;&lt;/script&gt;\")\n# we load the respective Scittle code\n\nprint(\"&lt;script&gt;\")\nwith open('notes.cljs', 'r') as file:\n    data = file.read().replace('\\n', '')\nprint(\"scittle.core.eval_string('\", data, \"')\")\nprint(\"&lt;/script&gt;\")\n\n\n\n\n\n\n1\n\n\n\n\n\nA B C D E F\n\nThe musical scale is logarithmic – I am going to use this concrete example to show my way of doing mathematical plots.\n\n\n\n\n_\n\n\n\n2\n\n\n\n\n\n\nThe curve above is drawn using the log2. To show this specific plot, I had to make some choice for the scale factors. – This notebook is online at the following address\nhttps://kloimhardt.github.io/site/log.html\nIts appendix links a Jupyter notebook for the ensuing code snippets. But I have jumped ahead. My story starts with the Python language. And plotting just the plain log2. And that already hits upon the main message of my presentation.\n\n\n\n\n_\n\nprint(\"&lt;script&gt;\")\nwith open('log23.cljs', 'r') as file:\n    data = file.read().replace('\\n', '')\nprint(\"scittle.core.eval_string('\", data, \"')\")\nprint(\"&lt;/script&gt;\")\n\n\n\n\n\n3\n\n\n\n\n\n\nplot(log2, [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\nThe message is this. – It is the log2 that you plot. This is so obvious that I’d like to state what log2 is not. It is not the log2 of x or y or z. Also, it is not some text that contains the string log2. Rather, log2 is a mathematical object. Only objects like this are suitable for plotting within the paradigm of my presentation.\n\n\n\n\n\n_\n\n\n4\n\n\n\n\n\nA B\n\nI am aware that you need some time for digesting my self-imposed plotting restrictions. So I move more towards the practical goal. -B- I need to get more to something like this. For that, I need to get back to the formula I showed at the start.\n\n\n\n\n_\n\n\n5\n\n\n\n\n\nA C D E\n\nThe formula I showed at the start is not something you can plot. -B- This is the main theme again. The theme is that I need a proper mathematical target to plot. To arrive at such a target, it is necessary to bind the formula to a procedure. -C- The procedure itself I gave the name Poe. It takes three arguments. Two parameters and the frequency x. -D- The procedure does the wanted computation. – It returns the value given by the formula. -E- In its code, you have to replace the numbers with the names of the two parameters. – I provide the procedure as Python code. -F-\n\n\n\n\n\n\n\n_\n\n\nB\n\n\n\nplot(\"log2(x / 220) * 7\", [1, 2, 4, 8])\n\n\"That's not something you can plot\"\n\n\n\n\n\n\nF\n\n\n\ndef Poe(intersect, steps, x):\n    return log2(x/intersect) * steps\n\nPoe(220, 7, 440)\n\n\\(\\displaystyle 7.0\\)\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\nA B D F\n\nI can plot log2 because it is a mathematical object. -B- But still I cannot plot the procedure Poe. -C- I need an operation called “partial” to transform Poe into the proper target to plot. -D- The procedure named “partial” takes “Poe” as an argument. – Then I can perform the plotting. -E- Here is the main theme in spades: “partial” taking a procedure to deliver the target to plot. -F- I turn all this into yet another procedure named log2b – That is very convenient for plotting. -G-\n\n\n\n\n\n\n\n\n\n\n\ndef log2b(intersect, steps):\n    return partial(Poe, intersect, steps)\n\n\n\n\n_\n\n\nC\n\n\n\nplot(Poe(220, 7, 440), [1, 2, 4, 8])\n\n\"That's not something you can plot\"\n\n\n\n\n\n\nE\n\n\n\nplot(partial(Poe, 220, 7), [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\n\nplot(log2b(220, 7), [1, 2, 4, 8])\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n\n\nA B D F G\n\nNot only can log2b be plotted. -B- Log2b can also be called. -C- Not only can log2b be called with data of type number. Log2b can also be called with a symbol. -DE- Using symbols along with numbers is possible thanks to a package named Sympy. Here you see that for the name of the symbol I chose x-naught. But x-naught is only the default of possible choices. As a symbol, for example, I can also choose x1. -F- For log2b, the x1 is just yet another data that happens to be of type symbol. This idea of “symbols as data” is the source for my freedom of choice. Before being able to process some data, log2b needs to be initialized with two parameters. -G- But these do not need to be of type integer. The float 0.7 does nicely as well. -a-\n\n\n\n\n\n_\n\n\nC\n\n\n\ncall(log2b(220, 7), 8)\n\n\\(\\displaystyle -33.4695179946726\\)\n\n\n\n\n\n\nE\n\n\n\ncall(log2b(220, 7), x0)\n\n\\(\\displaystyle 7 \\operatorname{log}_{2}{\\left(\\frac{x_{0}}{220} \\right)}\\)\n\n\n\n\n\n\na\n\n\n\ncall(log2b(1, 0.7), x1)\n\n\\(\\displaystyle 0.7 \\operatorname{log}_{2}{\\left(x_{1} \\right)}\\)\n\n\n\n\n\n\n8\n\n\n\n\n\nA B C D E F G\n\nI would not have bothered you with my O point seven invention, hadn’t I discovered it to be a segue to the natural logarithm. -B- In general, you can fit a series of triangles onto any curve. -C- Moving those triangles to the ground level reveals -D- that a new curve “one over x” fits their heights quite agreeably. −E− You can also try the other way around -F- That does not work quite as well. -G- The trick is to shrink the area while retaining the angles.\n\n\n\n\n_\n\n\n9\n\n\n\n\n\nA D\n\nI hope my triangles just formed an agreeable entertainment. For me they were (while making them). In conclusion, I assume you caught on to the topic I am aiming at: -D- differentiation. – Taking the derivative of log2b is simple and easy.\n\n\n\n\n_\n\n\n10\n\n\ncall(D(log2b(1, 0.7)), x0).evalf()\n\n\\(\\displaystyle \\frac{1.00988652862227}{x_{0}}\\)\n\n\n\n\n\n\n\ncall(D(ln), x0)\n\n\\(\\displaystyle \\frac{1}{x_{0}}\\)\n\n\n\nWith the log2b initialized at O point seven, I calculate its derivative. As a result I almost get one over x. To become exact, I need to switch to “ln”, the natural logarithm. The pictures above can, within this presentation, be called its pinnacle. As a kind of confirmation, I’d like to drop some names. In math, the procedure named “call” is a functional while D is an operator. In computer science, both is called functions of higher order. The natural logarithm “ln” of course is a function in any field.\n\n\n\n\n_\n\n\n–\n\n\\[\\Large \\left. \\frac{d \\ln(x)}{dx} \\right|_{x=x_0}\\]\n\nI’d like to wind down with a note on notation. When I differentiate a function like “ln” and then evaluate that derivative at x-naught, the common notation is the vertical bar. This bar is also called “pipe”.\n\n\n\n\n_\n\n\n–\n\n\n\n\n\nA B\n\nIn taking this inspiration from math, I use pipe in my pictures as well. -B- Note: it’s not the D operator which is replaced by the pipe, but it’s the “call” that is dropped. – Not only can “pipe” be used in pictures. The pipe can also be used within Python code. -C- You might think that my notation for pipe is hard to achieve. This is not so. My custom pipe is a few lines of Python only. – The pipe symbol is an invented alternative notation. In the following finale, I’d like to discover its explanatory virtues.\n\n\n\n\n_\n\n\nC\n\n\n(D(ln) | x0)\n\n\\(\\displaystyle \\frac{1}{x_{0}}\\)\n\n\n\n\n\n–\n\n\n\nclass PipeAsCall(object):\n    def __init__(self, func):\n        self.func = func\n    def __or__(self, other):\n        return self.func(other)\n    def __call__(self, x):\n        return self.func(x)\n\ndef partial(*args):\n    return PipeAsCall(\n        functools.partial(*args))\n\n\n\n\n\n11\n\n\n\n\n\nA B C E G b\n\nThe pipe notation is very versatile. I can also use it when plotting something. -B- In my dataset, the highest frequency is eight kilohertz. -CD- I’d like to cut that down to 900 cycles per second. -E- So I apply a filter – and plot. -F- I want to move the filtering to the left. Or in a more picturesque manner: I want the filtering to be ahead of the pipes. For this, I use function composition. -G- This composition is completely decoupled from input sources and output formats. This leads to a method commonly known as “transducing” – Transducers are ahead of the pipe. -a- For sure you can insert differentiation into the composition as easily as ever. -bc-\n\n\n\n\n_\n\n\nD\n\n\n\n(plotting(ln) | frequencies)\n\n\n\n\n\n\n\n\n\n\n\n\nF\n\n\n\n(plotting(ln) |\n  (filtering(smaller(900)) |\n    frequencies))\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n(plotting\n  (compose\n    (mapping(ln), \n     filtering(smaller(900)))) |\n  frequencies)\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n(plotting\n  (compose\n    (mapping(D(ln)), \n     filtering(smaller(900)))) |\n  frequencies)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAppendix\n\nTry the Jupyter notebook:\n\ngo to the Jupyter-lite web page https://jupyter.org/try-jupyter/lab/\nclick File -&gt; Open from URL\npaste the following URL: https://raw.githubusercontent.com/kloimhardt/site/main/mysite/log.ipynb\nselect the “Pyodide” Kernel and click Run -&gt; Run All Cells\n\nThis notebook was generated using Quarto.\n\nWalkthrough video for the notebook: https://www.youtube.com/watch?v=FE5pB3yvCRs\nThe source code can be viewed here: https://github.com/kloimhardt/site/blob/main/mysite/log.qmd\n\nThe idea for this Python notebook is based on an older interactive workspace:\n\nWatch the Clojure visual-tools meeting from 2022\nTry out the workspace at https://kloimhardt.github.io/cljtiles.html?page=FDG001\nMaybe also try https://kloimhardt.github.io/cljtiles.html?page=116"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notebooks",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "lise.html",
    "href": "lise.html",
    "title": "Lise",
    "section": "",
    "text": "hallo ich auch"
  },
  {
    "objectID": "lise.html#dialog-lise-albert",
    "href": "lise.html#dialog-lise-albert",
    "title": "Lise",
    "section": "",
    "text": "hallo ich auch"
  },
  {
    "objectID": "twotiles.html",
    "href": "twotiles.html",
    "title": "Twotiles Code Visualization",
    "section": "",
    "text": "Twotiles is a free and open JavaScript libaray for turning code into visual blocks. The library can be used in any website."
  },
  {
    "objectID": "twotiles.html#example",
    "href": "twotiles.html#example",
    "title": "Twotiles Code Visualization",
    "section": "Example",
    "text": "Example\nThe following uses a simple math example, taking the derivative of a logarithm, to show how code is visualized with the Twotiles library.\n\nSymbolic computation in Python: SymPy\n\n\nCode Preamble\nfrom sympy import symbols,diff,log\nfrom functools import partial\nx=symbols(\"x\")\nb=symbols(\"b\")\ny=symbols(\"y\")\n\ndef call(f, x):\n    return f(x)\n\n\nUsing SymPy, one can calculate with symbols. Here, x is a symbol.\n\n\n\n\n\n\n\n5/x - (50 + 14)\n\n\n\\(\\displaystyle -64 + \\frac{5}{x}\\)\n\n\n\n\n\n\n\n\n\nlog(64.0)\n\n\n\\(\\displaystyle 4.15888308335967\\)\n\n\nOne can also make an explicit call to the log function.\n\n\n\n\n\n\n\ncall(log, 64.0)\n\n\n\\(\\displaystyle 4.15888308335967\\)\n\n\nThis makes call a special kind of function. Because it takes a function as its first argument, call is a function of “higher order”. But for now we return to the usual way of making a calculation.\n\n\n\n\n\n\n\nlog(x * 5)\n\n\n\\(\\displaystyle \\log{\\left(5 x \\right)}\\)\n\n\n\n\n\n\n\n\n\ndiff(log(x) * 5, x)\n\n\n\\(\\displaystyle \\frac{5}{x}\\)\n\n\n\n\n\n\n\n\n\ndiff(log(x),x)\n\n\n\\(\\displaystyle \\frac{1}{x}\\)\n\n\n\n\n\n\n\n\n\ndef logarithm(b, x):\n    return log(x) / log(b)\n\n\n\n\n\n\n\n\n\nlogarithm(8.0, 64.0)\n\n\n\\(\\displaystyle 2.0\\)\n\n\n\n\n\n\n\n\n\ndef log_base(b):\n    return partial(logarithm, b)\n\n\n\n\n\n\n\n\n\ncall(log_base(8.0),64.0)\n\n\n\\(\\displaystyle 2.0\\)\n\n\n\n\n\n\n\n\n\ndiff(call(log_base(8.0),x),x)\n\n\n\\(\\displaystyle \\frac{0.480898346962988}{x}\\)\n\n\n\n\nSymbolic computation in JavaScript: EmmyJS\n\n\n\n\n\n\n\n\n\n\n\nto_infix(\n  call(diff(log_base(8.0)), x)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nto_infix(\n  call(diff(log), x)\n)\n\n\n\n\n\n\n\n\n\nSymPy Recap"
  },
  {
    "objectID": "twotiles.html#guide",
    "href": "twotiles.html#guide",
    "title": "Twotiles Code Visualization",
    "section": "Guide",
    "text": "Guide\n\nUsing Twotiles in a Website\nTo display graphical blocks, include into your web-site the Scittle, Blockly and indeed the Twotiles library:\n&lt;script src=\"https://cdn.jsdelivr.net/npm/scittle@0.6.22/dist/scittle.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/blockly/blockly.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/blockly/msg/en.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://kloimhardt.github.io/twotiles/twotiles_core.js\"&gt;&lt;/script&gt;\nThen initialize the Twotiles parser …\n&lt;script&gt;\nvar parse = scittle.core.eval_string(twotiles.parse_clj);\n&lt;/script&gt;\n… and Blockly:\n&lt;script&gt;\nBlockly.defineBlocksWithJsonArray(twotiles.blocks);\n&lt;/script&gt;\nIt is convenient to have a render function:\n&lt;script&gt;\nvar brender = (code,divid) =&gt;\nBlockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.utils.xml.textToDom(parse(code)),\nBlockly.inject(divid,\n{\"toolbox\": twotiles.toolbox,\n\"sounds\": false,\n\"scrollbars\": false,\n\"trashcan\": false}));\n&lt;/script&gt;\nThen graphics can be displayed with\n&lt;div id=\"blocklyDiv\" style=\"height: 100px;\"&gt;&lt;/div&gt;\n&lt;script&gt;brender(\"(log 64)\", \"blocklyDiv\")&lt;/script&gt;\nwhich looks like this:\n\n\n\n\n\n\nUsing EmmyJS\nA detailed example of EmmyJS can be found at sicmutils-as-js-book-part1.html\n\n\nQuarto Notebook of this Page\nThis page was generated with Quarto out of the file twotiles.qmd"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]